<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Great hopes make great man</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-25T11:05:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 9.0 Activity 启动流程分析</title>
    <link href="http://yoursite.com/a608ff50/"/>
    <id>http://yoursite.com/a608ff50/</id>
    <published>2019-09-15T11:42:33.000Z</published>
    <updated>2019-09-25T11:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>从一个问题出发：调用 startActivity 后系统到底做了什么事？</p><p>如果让我回答这个问题，我的答案会是这样：Android 系统启动后会先启动一个 init 进程，init 进程启动 Zygote 进程，Zygote 进程进而会启动 system server 进程，在这个 system server 进程中，会启动 AMS、WMS 等系统服务。我们的 app 中调用 startActivity 后，需要通过 AMS 执行启动 Activity，而我们的 app 进程与 system server 是不同的进程，所以要跨进程，跨进程是通过 Binder 来实现的。 </p><p>（？？？？？满脸问号脸），我这是回答了啥？</p><a id="more"></a><p>问题是调用 startActivity 后系统到底做了什么事？而我却只是讲了下需要跨进程调用 AMS，可以说几乎是没有回答。为什么我讲了一通却根本没有回答到点上呢？因为我不会… 我根本不知道具体要调用到哪几个类，有哪几个关键方法，做了哪些关键的事，为了突破这个障碍，今天就来仔细研究一下到底 startActivity 做了哪些事，涉及源码基于 <a href="http://androidxref.com/9.0.0_r3/" target="_blank" rel="noopener">Android 9.0 版本</a></p><p>在开始分析之前，心存这几个疑问：</p><ul><li>代码中具体是在哪里调用 AMS 跨进程通信的？</li><li>跨进程调用 AMS 是通过 AIDL 接口方式实现的吗？如果是的话，具体是哪个接口？</li><li>Intent 数据具体是怎样跨进程传输的呢？</li><li>为什么需要 AMS 去执行 Activity 的启动，AMS 到底做了哪些事？</li><li>AMS 执行完后再回到 app 进程也是跨进程，这部分是怎么实现的？ </li><li>上一个 Activity onPause 方法执行完新的 Activity 才能被创建，这个逻辑是在哪里控制的？</li></ul><p>好了开车吧！🙂️</p><p>startActivity 首先会调用到 Activity#startActivityForResult 方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">          @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;<span class="comment">//【a】</span></span><br><span class="line">          options = transferSpringboardActivityOptions(options);</span><br><span class="line">          Instrumentation.ActivityResult ar =</span><br><span class="line">              mInstrumentation.execStartActivity(</span><br><span class="line">                  <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">                  intent, requestCode, options);<span class="comment">//【b】</span></span><br><span class="line">          <span class="comment">//省略...</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">              mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>【a】. mParent 是一个 Activity，父 Activity 是什么场景下的呢，起初怀疑与 manifest 中 parentActivityName 配置有关，但并没有。<br>【b】. 进一步调用 Instrumentation 的 execStartActivity 方法，Instrumentation 用于具体操作某个 Activity 的功能（单向调用 AMS）以及统计、测量该应用程序的所有开销，这与它的中文含义”仪表盘”可以说是相当吻合。一个进程只有一个 Instrumentation 对象，每个 Activity 都持有 Instrumentation 。</p><p>Instrumentation 的 execStartActivity 方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Context who, IBinder contextThread, IBinder token, String target,</span></span></span><br><span class="line"><span class="function"><span class="params">    Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">    IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">    <span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        intent.migrateExtraStreamToClipData();</span><br><span class="line">        intent.prepareToLeaveProcess(who);</span><br><span class="line">        <span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">            .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                    token, target, requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options); <span class="comment">//【a】</span></span><br><span class="line">        checkStartActivityResult(result, intent);<span class="comment">//【b】</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【b】. 处理启动 Activity 的结果，如果结果值异常的话进一步抛出异常<br>【a】. 通过 ActivityManager 获取到 AMS 并调用 startActivity 方法，这也说明上面对 Instrumentation 的描述是正确的，确实是通过它来调用 AMS 的，这时候我们也能自信的回答 “startActivity 方法是在哪里跨进程调用 AMS 的” 问题了。</p><p>继续来看 ActivityManager 的 getService 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">        <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;<span class="comment">//【a】</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);<span class="comment">//【b】</span></span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);<span class="comment">//【c】</span></span><br><span class="line">                <span class="keyword">return</span> am;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></p><p>【a】. 这里通过 Singleton+泛型 方式实现了单例，有 lazy 和易读的优点，平时写单例一般是通过静态内部类或枚举实现的，适当的场景也可以考虑用这种方式写，不过 Singleton 是 @hide 的，需要我们在外部定义<br>【b】. 在学习 Binder 机制的时候有四个很重要的概念，Client、Server、ServiceManager、Binder 驱动，ServiceManager 主要作用就是帮助系统维护众多的 Service 列表，ServiceManager 本身也是运行在一个独立的进程，所以从 ServiceManager 中获取 Service 也是一个跨进程操作，为了提高性能，内部以 HashMap&lt;String, IBinder&gt; 形式缓存了各个 Service。<br>【c】. 这里可以看到是标准的 AIDL 的调用格式，IActivityManager 就是跨进程调用 AMS 的 AIDL 接口，源码位于 frameworks/base/core/java/android/app/IActivityManager.aidl，这时我们就能回答开头的 “跨进程调用 AMS 是通过 AIDL 接口方式实现的吗？如果是的话，具体是哪个接口” 问题了。</p><p>就这样调用逻辑在 Instrumentation 中由 AMS 接管，AMS 继承 IActivityManager.Stub 实现了 IPC 方法，供 Instrumentation、Context 调用，AMS 代码量很庞大（27000+行），源码位于 frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p><p>接着来看 AMS 的 startActivityAsUser 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> validateIncomingUser)</span> </span>&#123;</span><br><span class="line">    enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</span><br><span class="line"></span><br><span class="line">    userId = mActivityStartController.checkTargetUser(userId, validateIncomingUser,</span><br><span class="line">            Binder.getCallingPid(), Binder.getCallingUid(), <span class="string">"startActivityAsUser"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">    <span class="keyword">return</span> mActivityStartController.obtainStarter(intent, <span class="string">"startActivityAsUser"</span>)</span><br><span class="line">            .setCaller(caller)</span><br><span class="line">            .setCallingPackage(callingPackage)</span><br><span class="line">            .setResolvedType(resolvedType)</span><br><span class="line">            .setResultTo(resultTo)</span><br><span class="line">            .setResultWho(resultWho)</span><br><span class="line">            .setRequestCode(requestCode)</span><br><span class="line">            .setStartFlags(startFlags)</span><br><span class="line">            .setProfilerInfo(profilerInfo)</span><br><span class="line">            .setActivityOptions(bOptions)</span><br><span class="line">            .setMayWait(userId)</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就已经处于 system server 进程了，对于开头的问题 “Intent 数据具体是怎样跨进程传输的”，也有了答案，是通过调用 AIDL 接口方法作为参数直接传递的。这里可以看到 Activity 的启动逻辑用 ActivityStarter 做了一层封装，写法上更加清晰，ActivityStarter 的 execute 方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequest.mayWait) &#123;</span><br><span class="line">            <span class="keyword">return</span> startActivityMayWait(mRequest.caller, mRequest.callingUid,</span><br><span class="line">                    mRequest.callingPackage, mRequest.intent, mRequest.resolvedType,</span><br><span class="line">                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,</span><br><span class="line">                    mRequest.resultWho, mRequest.requestCode, mRequest.startFlags,</span><br><span class="line">                    mRequest.profilerInfo, mRequest.waitResult, mRequest.globalConfig,</span><br><span class="line">                    mRequest.activityOptions, mRequest.ignoreTargetSecurity, mRequest.userId,</span><br><span class="line">                    mRequest.inTask, mRequest.reason,</span><br><span class="line">                    mRequest.allowPendingRemoteAnimationRegistryLookup);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startActivity(mRequest.caller, mRequest.intent, mRequest.ephemeralIntent,</span><br><span class="line">                    mRequest.resolvedType, mRequest.activityInfo, mRequest.resolveInfo,</span><br><span class="line">                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,</span><br><span class="line">                    mRequest.resultWho, mRequest.requestCode, mRequest.callingPid,</span><br><span class="line">                    mRequest.callingUid, mRequest.callingPackage, mRequest.realCallingPid,</span><br><span class="line">                    mRequest.realCallingUid, mRequest.startFlags, mRequest.activityOptions,</span><br><span class="line">                    mRequest.ignoreTargetSecurity, mRequest.componentSpecified,</span><br><span class="line">                    mRequest.outActivity, mRequest.inTask, mRequest.reason,</span><br><span class="line">                    mRequest.allowPendingRemoteAnimationRegistryLookup);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        onExecutionComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进一步会调用 startActivityMayWait 方法，然后就是在 ActivityStarter 一大长串的调用了，调用顺序为：startActivityMayWait -&gt; startActivity -&gt; startActivity -&gt; startActivity -&gt; startActivityUnchecked，</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><ol><li><a href="https://blog.csdn.net/itachi85/article/details/78569299" target="_blank" rel="noopener">Android深入四大组件（六）Android8.0 根Activity启动过程（前篇）</a></li><li><a href="https://blog.csdn.net/qinjuning/article/details/7262769" target="_blank" rel="noopener">Android中ActivityManagerService与应用程序(客户端)通信模型分析</a></li><li><a href="https://www.2cto.com/kf/201903/799681.html" target="_blank" rel="noopener">Android startActivity原理分析(基于Android 8.1 AOSP)</a></li><li><a href="https://segmentfault.com/a/1190000019042206" target="_blank" rel="noopener">AMS startActivity())</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从一个问题出发：调用 startActivity 后系统到底做了什么事？&lt;/p&gt;
&lt;p&gt;如果让我回答这个问题，我的答案会是这样：Android 系统启动后会先启动一个 init 进程，init 进程启动 Zygote 进程，Zygote 进程进而会启动 system server 进程，在这个 system server 进程中，会启动 AMS、WMS 等系统服务。我们的 app 中调用 startActivity 后，需要通过 AMS 执行启动 Activity，而我们的 app 进程与 system server 是不同的进程，所以要跨进程，跨进程是通过 Binder 来实现的。 &lt;/p&gt;
&lt;p&gt;（？？？？？满脸问号脸），我这是回答了啥？&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="http://yoursite.com/categories/Framework/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Framework" scheme="http://yoursite.com/tags/Framework/"/>
    
      <category term="AMS" scheme="http://yoursite.com/tags/AMS/"/>
    
  </entry>
  
  <entry>
    <title>Android 集成 FFmpeg (四) 轻松实现一个音视频编辑 App</title>
    <link href="http://yoursite.com/798144ac/"/>
    <id>http://yoursite.com/798144ac/</id>
    <published>2019-06-16T12:07:18.000Z</published>
    <updated>2019-06-28T10:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看到一篇关于 FFmpeg 的文章，讲的大概是基于 FFmpeg 实现了一个 App，支持视频拼图等强大炫酷的音视频编辑功能，其原理是在 Android 端集成 FFmpeg，通过命令方式调用 FFmpeg。</p><p>尽管在 Android 端集成命令方式调用并不复杂，但一个具有强大炫酷音视频编辑功能的 App 是有价值的。由此启发，并决定敲下 Android 集成 FFmpeg 系列的第四篇，以一个实际应用的方式展现 FFmpeg 强大的音视频编辑功能。</p><blockquote><p>强烈建议你下载试用感受一下：<a href="https://fir.im/f3vd" target="_blank" rel="noopener">https://fir.im/f3vd</a></p></blockquote><a id="more"></a><p>应用截图：</p><p><img src="../img/19.jpg" alt></p><blockquote><p>源码：<a href="https://github.com/yhaolpz/FFmpegCmd" target="_blank" rel="noopener">https://github.com/yhaolpz/FFmpegCmd</a></p></blockquote><p>若想实现更多效果，见 <a href="http://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">ffmpeg Documentation</a>，应用代码非常简单，这里就不再过多阐述，直接查看源码，一看即懂，理论知识及编译实现见前三篇：</p><blockquote><p><a href="https://yhaolpz.github.io/e0b4d9fc/" target="_blank" rel="noopener">Android 集成 FFmpeg (一) 基础知识及简单调用</a><br><a href="https://yhaolpz.github.io/ddeb5551/" target="_blank" rel="noopener">Android 集成 FFmpeg (二) 以命令方式调用 FFmpeg</a><br><a href="https://yhaolpz.github.io/8837781/" target="_blank" rel="noopener">Android 集成 FFmpeg (三) 获取 FFmpeg 执行进度</a></p></blockquote><p>这个系列也算是画个句号，后续将学习 OpenGL 相关，结合实现高效的实时渲染。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网上看到一篇关于 FFmpeg 的文章，讲的大概是基于 FFmpeg 实现了一个 App，支持视频拼图等强大炫酷的音视频编辑功能，其原理是在 Android 端集成 FFmpeg，通过命令方式调用 FFmpeg。&lt;/p&gt;
&lt;p&gt;尽管在 Android 端集成命令方式调用并不复杂，但一个具有强大炫酷音视频编辑功能的 App 是有价值的。由此启发，并决定敲下 Android 集成 FFmpeg 系列的第四篇，以一个实际应用的方式展现 FFmpeg 强大的音视频编辑功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;强烈建议你下载试用感受一下：&lt;a href=&quot;https://fir.im/f3vd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://fir.im/f3vd&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="音视频" scheme="http://yoursite.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>Android OpenGL ES（三）简单图形变换</title>
    <link href="http://yoursite.com/1008175c/"/>
    <id>http://yoursite.com/1008175c/</id>
    <published>2019-06-16T09:11:32.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管对 VAO、VBO 以及纹理相关的知识跃跃欲试，但还是决定耐下心来，先学习绘制一些简单图形及图形变换，在第一篇文章也只是简单学习了下 GLSL 语言，这篇文章的学习也可以对 GLSL 语言有更好的掌握。</p><a id="more"></a><blockquote><p>正在学习…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管对 VAO、VBO 以及纹理相关的知识跃跃欲试，但还是决定耐下心来，先学习绘制一些简单图形及图形变换，在第一篇文章也只是简单学习了下 GLSL 语言，这篇文章的学习也可以对 GLSL 语言有更好的掌握。&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Android OpenGL ES（二）绘制三角形</title>
    <link href="http://yoursite.com/2296ca3/"/>
    <id>http://yoursite.com/2296ca3/</id>
    <published>2019-06-16T08:39:50.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过上篇文章的学习，现在已经了解到，要想在 Android 端使用 OpenGL ES 绘制图形，必须创建 OpenGL ES 环境和视图窗口，具体来说就是构建 EGL 环境，即 OpenGL ES 和 Android 底层平台视窗系统之间的接口。另外 OpenGL ES 2.0 版本为可编程管线，我们就可以编写着色器程序来确定绘制内容，即编写 Vertex Shader 顶点着色器和 Fragment Shader 片元着色器。</p><p>而这些工作可以通过 GLSurfaceView 非常简单的实现。</p><a id="more"></a><p>在介绍 GLSurfaceView 之前先来看下 Android 系统提供的与 OpenGL ES 相关的包：</p><ul><li>javax.microedition.khronos.opengles： 存放 GL 绘图指令相关代码</li><li>javax.microedition.khronos.egl： 存放 EGL 管理相关代码，包括 Display、surface 等</li><li>android.opengl： 存放 GL 辅助类，连接 OpenGL 与 Android View，Activity 等</li></ul><p>其中 GLSurfaceView 处于 android.opengl 包中，GLSurfaceView 具有以下特性：</p><ul><li>内置 EGL 管理，自带 GL 上下文环境和 GLThread 绘制线程</li><li>起到连接 OpenGL ES 与 Android 的 View 层次结构之间的桥梁作用</li><li>使得 OpenGL ES 库适应于 Activity 生命周期</li><li>继承自 SurfaceView，拥有 SurfaceView 的全部特性，绘制结果会输出到 SurfaceView 所提供的 Surface 上</li><li>提供了方便使用的调试工具来跟踪 OpenGL ES 函数调用以帮助检查错误</li></ul><p>通过 GLSurfaceView 的 setRenderer 方法可设置要渲染的效果，即 GLSurfaceView.Renderer 渲染器接口，该接口方法：</p><ul><li>onSurfaceCreated：渲染线程开启时调用，可做初始化背景色、初始化纹理资源等工作</li><li>onSurfaceChanged：窗口尺寸改变时调用，通常会设置视窗范围或投影矩阵等</li><li>onDrawFrame：外部请求渲染一次就调用一次，可在此载入着色器程序、激活绑定纹理以及调用绘制</li></ul><p>下面来看具体如何绘制一个三角形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顶点着色器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String vertexShaderResource =</span><br><span class="line">            <span class="string">"attribute vec3 vPosition;"</span> +</span><br><span class="line">                    <span class="string">"void main() &#123;"</span> +</span><br><span class="line">                    <span class="string">"  gl_Position = vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);"</span> +</span><br><span class="line">                    <span class="string">"&#125;"</span>;</span><br><span class="line">    <span class="comment">//片段着色器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fragmentShaderResource =</span><br><span class="line">            <span class="string">"precision mediump float;"</span> +</span><br><span class="line">                    <span class="string">"uniform vec4 vColor;"</span> +</span><br><span class="line">                    <span class="string">"void main() &#123;"</span> +</span><br><span class="line">                    <span class="string">"  gl_FragColor = vColor;"</span> +</span><br><span class="line">                    <span class="string">"&#125;"</span>;</span><br><span class="line">    <span class="comment">//顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] vertexCoords = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// top</span></span><br><span class="line">            -<span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom left</span></span><br><span class="line">            <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>  <span class="comment">// bottom right</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> color[] = &#123;<span class="number">1.0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>&#125;; <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 着色器程序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mProgram;</span><br><span class="line">    <span class="comment">// 顶点坐标数据</span></span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexFloatBuffer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置清空屏幕后的背景色</span></span><br><span class="line">        GLES30.glClearColor(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        <span class="comment">//构建顶点着色器</span></span><br><span class="line">        <span class="keyword">int</span> vertexShader = GLES30.glCreateShader(GLES30.GL_VERTEX_SHADER);</span><br><span class="line">        GLES30.glShaderSource(vertexShader, vertexShaderResource);</span><br><span class="line">        GLES30.glCompileShader(vertexShader);</span><br><span class="line">        <span class="comment">//构建片段着色器</span></span><br><span class="line">        <span class="keyword">int</span> fragmentShader = GLES30.glCreateShader(GLES30.GL_FRAGMENT_SHADER);</span><br><span class="line">        GLES30.glShaderSource(fragmentShader, fragmentShaderResource);</span><br><span class="line">        GLES30.glCompileShader(fragmentShader);</span><br><span class="line">        <span class="comment">//构建着色器程序，并将顶点着色器和片段着色器链接进来</span></span><br><span class="line">        mProgram = GLES30.glCreateProgram();</span><br><span class="line">        GLES30.glAttachShader(mProgram, vertexShader);</span><br><span class="line">        GLES30.glAttachShader(mProgram, fragmentShader);</span><br><span class="line">        GLES30.glLinkProgram(mProgram);</span><br><span class="line">        <span class="comment">//顶点着色器和片段着色器链接到着色器程序后就无用了</span></span><br><span class="line">        GLES30.glDeleteShader(vertexShader);</span><br><span class="line">        GLES30.glDeleteShader(fragmentShader);</span><br><span class="line">        <span class="comment">//转换为需要的顶点数据格式</span></span><br><span class="line">        vertexFloatBuffer = floatToBuffer(vertexCoords);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置视窗</span></span><br><span class="line">        GLES30.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//清空屏幕，擦除屏幕上所有的颜色，用 glClearColor 定义的颜色填充</span></span><br><span class="line">        GLES30.glClear(GLES30.GL_COLOR_BUFFER_BIT);</span><br><span class="line">        <span class="comment">//在当前 EGL 环境激活着色器程序</span></span><br><span class="line">        GLES30.glUseProgram(mProgram);</span><br><span class="line">        <span class="comment">//获取顶点着色器的 vPosition 成员句柄</span></span><br><span class="line">        <span class="keyword">int</span> positionHandle = GLES30.glGetAttribLocation(mProgram, <span class="string">"vPosition"</span>);</span><br><span class="line">        <span class="comment">//启用句柄</span></span><br><span class="line">        GLES30.glEnableVertexAttribArray(positionHandle);</span><br><span class="line">        <span class="comment">//设置顶点坐标数据</span></span><br><span class="line">        GLES30.glVertexAttribPointer(positionHandle, <span class="number">3</span>, GLES30.GL_FLOAT,</span><br><span class="line">                <span class="keyword">false</span>, <span class="number">3</span> * <span class="number">4</span>, vertexFloatBuffer);</span><br><span class="line">        <span class="comment">//获取片元着色器的 vColor 成员句柄</span></span><br><span class="line">        <span class="keyword">int</span> colorHandle = GLES30.glGetUniformLocation(mProgram, <span class="string">"vColor"</span>);</span><br><span class="line">        <span class="comment">//设置颜色</span></span><br><span class="line">        GLES30.glUniform4fv(colorHandle, <span class="number">1</span>, color, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//绘制三角形</span></span><br><span class="line">        GLES30.glDrawArrays(GLES30.GL_TRIANGLE_STRIP, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//禁止顶点数组的句柄</span></span><br><span class="line">        GLES30.glDisableVertexAttribArray(positionHandle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FloatBuffer <span class="title">floatToBuffer</span><span class="params">(<span class="keyword">float</span>[] a)</span> </span>&#123;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(a.length * <span class="number">4</span>); <span class="comment">//float占4个字节</span></span><br><span class="line">        buffer.order(ByteOrder.nativeOrder());</span><br><span class="line">        FloatBuffer byteBuffer = buffer.asFloatBuffer();</span><br><span class="line">        byteBuffer.put(a);</span><br><span class="line">        byteBuffer.position(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> byteBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顶点输入"><a href="#顶点输入" class="headerlink" title="顶点输入"></a>顶点输入</h4><p>要绘制一个三角形，就要确定三个顶点的 3D 坐标（OpenGL 是一个 3D 图形库，在 OpenGL 中指定的所有坐标都需要是 3D 坐标，即 x、y 和 z）。而顶点坐标起始于局部坐标，需要为标准化设备坐标，即 x、y、z 的范围限定于 -1 到 1 之间，任何落在范围外的坐标都会被丢弃。上面代码中输入的顶点数据为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] vertexCoords = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">        <span class="number">0.0f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">        -<span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">        <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里将 z 坐标都设置为 0，表示三角形每一点的深度都为 0（通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源），这样定义的顶点数据反应到标准化设备坐标系中就是这样的：</p><p><img src="../img/17.jpg" alt></p><h4 id="解释顶点数据"><a href="#解释顶点数据" class="headerlink" title="解释顶点数据"></a>解释顶点数据</h4><p>可以看到调用 glVertexAttribPointer 设置顶点数据时并不是直接把 float[] 数组传递进去，而是转换成 FloatBuffer 传入，所谓的解释顶点数据就是说明输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。对于 glVertexAttribPointer 函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">glVertexAttribPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> indx,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> size, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> normalized,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> stride,</span></span></span><br><span class="line"><span class="function"><span class="params">    java.nio.Buffer ptr</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure></p><ul><li>indx：指定要配置的顶点属性，这里传入顶点着色器的 vPosition 成员句柄</li><li>size：指定顶点属性的大小，顶点属性是一个 vec3，它由 3 个值（x、y、z）组成，所以大小传入 3</li><li>type：指定数据的类型为 float 类型</li><li>normalized：是否希望数据被标准化</li><li>stride：指定连续的顶点数据之间的间隔，由于一个顶点数据长度为 3 个 float，所以把步长设置为 3 * 4（一个 float 占 4 个字节）</li><li>ptr：顶点数据</li></ul><p>下图很好的阐释这个逻辑：</p><p><img src="../img/18.jpg" alt></p><h4 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String vertexShaderResource =</span><br><span class="line">    <span class="string">"attribute vec3 vPosition;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"  gl_Position = vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>由于每个顶点都有一个 3D 坐标，这里就创建一个 vec3 变量输入顶点坐标。而内置变量 gl_Position 为 vec4 类型，所以需要将三维向量转换为四维向量，最后 gl_Position 设置的值会成为该顶点着色器的输出。</p><p>onDrawFrame 方法中在获取顶点着色器的 vPosition 成员句柄后，需要调用 glEnableVertexAttribArray、glDisableVertexAttribArray 分别启用、禁止顶点数据，而片段着色器的 vColor 成员句柄就不需要。这是因为出于性能考虑，所有顶点着色器的属性默认都是关闭的。<br>glVertexAttribPointer 只是建立 CPU 和 GPU 之间的逻辑连接实现将 CPU 数据上传至 GPU，但是，数据在 GPU 端是否可见，即着色器能否读取到数据，还要取决于 glEnableVertexAttribArray 方法。</p><h4 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fragmentShaderResource =</span><br><span class="line"><span class="string">"precision mediump float;"</span> +</span><br><span class="line">        <span class="string">"uniform vec4 vColor;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"  gl_FragColor = vColor;"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在 OpenGL 中定义一个颜色的数据格式为 RGBA 四个 0.0 到 1.0 之间强度的分量，片段着色器所做的是计算像素最后的颜色输出，也只有 gl_FragColor 这一个输出变量。</p><h4 id="编译着色器"><a href="#编译着色器" class="headerlink" title="编译着色器"></a>编译着色器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> vertexShader = GLES30.glCreateShader(GLES30.GL_VERTEX_SHADER);</span><br><span class="line">GLES30.glShaderSource(vertexShader, vertexShaderResource);</span><br><span class="line">GLES30.glCompileShader(vertexShader);</span><br></pre></td></tr></table></figure><p>为了让 OpenGL 能够使用我们编写的着色器源码，必须在运行时动态编译。首先通过 glCreateShader 创建一个着色器对象，返回该着色器的 ID，然后通过 glShaderSource、glCompileShader 方法将源码附着在着色器对象上并编译它。</p><p>编译着色器可能失败，一般编译时会通过如下方法判断是否编译成功并输出编译信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] compileStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">GLES20.glGetShaderiv(shaderObjectId, GLES20.GL_COMPILE_STATUS, compileStatus, <span class="number">0</span>);</span><br><span class="line">Log.d(TAG, <span class="string">"glCompileStatus: "</span> + compileStatus[<span class="number">0</span>] </span><br><span class="line">            + <span class="string">" log:"</span> + GLES20.glGetShaderInfoLog(shaderObjectId));</span><br><span class="line"><span class="keyword">if</span> (compileStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123; <span class="comment">//编译失败</span></span><br><span class="line">    GLES20.glDeleteShader(shaderObjectId);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="着色器程序"><a href="#着色器程序" class="headerlink" title="着色器程序"></a>着色器程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mProgram = GLES30.glCreateProgram();</span><br><span class="line">GLES30.glAttachShader(mProgram, vertexShader);</span><br><span class="line">GLES30.glAttachShader(mProgram, fragmentShader);</span><br><span class="line">GLES30.glLinkProgram(mProgram);</span><br></pre></td></tr></table></figure><p>着色器程序对象是多个着色器合并之后并最终链接完成的版本，它将编译好的顶点着色器和片段着色器链接为一个着色器程序对象，链接后顶点着色器和片段着色器就没用了，可以通过 glDeleteShader 删除。就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] linkStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">GLES20.glGetProgramiv(mProgram, GLES20.GL_LINK_STATUS, linkStatus, <span class="number">0</span>);</span><br><span class="line">Log.d(TAG, <span class="string">"glCompileStatus："</span> + linkStatus[<span class="number">0</span>]</span><br><span class="line">            + <span class="string">" log:"</span> + GLES20.glGetProgramInfoLog(mProgram));</span><br><span class="line"><span class="keyword">if</span> (linkStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123; <span class="comment">//链接失败</span></span><br><span class="line">    GLES20.glDeleteProgram(mProgram);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>链接成功后，在渲染的时候通过 glUseProgram 方法激活着色器程序，已激活着色器程序的着色器就会在渲染时被使用，最后通过 glDrawArrays 方法触发绘制。</p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://item.jd.com/12292642.html" target="_blank" rel="noopener">《音视频开发进阶指南 - 基于Android与IOS平台的实践》</a><br><a href="https://blog.csdn.net/TuGeLe/article/details/79199161" target="_blank" rel="noopener">Android GLSurfaceView详解</a><br><a href="http://wiki.jikexueyuan.com/project/opengl-es-guide/glsurfaceview.html" target="_blank" rel="noopener">GLSurfaceView</a><br><a href="https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/" target="_blank" rel="noopener">你好，三角形</a><br><a href="https://www.jianshu.com/p/b05884a0ff8e" target="_blank" rel="noopener">OpenGL ES 3.0 glEnableVertexAttribArray的作用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过上篇文章的学习，现在已经了解到，要想在 Android 端使用 OpenGL ES 绘制图形，必须创建 OpenGL ES 环境和视图窗口，具体来说就是构建 EGL 环境，即 OpenGL ES 和 Android 底层平台视窗系统之间的接口。另外 OpenGL ES 2.0 版本为可编程管线，我们就可以编写着色器程序来确定绘制内容，即编写 Vertex Shader 顶点着色器和 Fragment Shader 片元着色器。&lt;/p&gt;
&lt;p&gt;而这些工作可以通过 GLSurfaceView 非常简单的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Android OpenGL ES（一）开发入门</title>
    <link href="http://yoursite.com/eeb650a2/"/>
    <id>http://yoursite.com/eeb650a2/</id>
    <published>2019-06-09T12:40:06.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>早就听过大名鼎鼎的 OpenGL，却迟迟没有实践学习，有些惭愧。今天开始通过实践+博文方式学习掌握 OpenGL。此文对于 OpenGL 的学习分为以下部分：</p><ul><li>OpenGL 基础概念</li><li>OpenGL 坐标系理解</li><li>OpenGL 渲染管线</li><li>OpenGL 着色语言</li></ul><a id="more"></a><h1 id="OpenGL-基础概念"><a href="#OpenGL-基础概念" class="headerlink" title="OpenGL 基础概念"></a>OpenGL 基础概念</h1><h4 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h4><p>OpenGL 即 Open Graphics Library，是一个功能强大、调用方便的底层图形库，它定义了跨编程语言、跨平台的专业图形程序接口，可用于二维或三维图像的处理与渲染。</p><p>OpenGL 是跨平台的，除了它纯粹专注的渲染外，其他内容在每个平台上都要有它的具体实现，比如上下文环境和窗口的管理就交由各个设备自己来完成。</p><h4 id="OpenGL-ES"><a href="#OpenGL-ES" class="headerlink" title="OpenGL ES"></a>OpenGL ES</h4><p>OpenGL ES （OpenGL for Embedded Systems）是三维图形 API OpenGL 的子集，针对手机、PDA 和游戏主机等嵌入式设备而设计。</p><p>Android 对应 OpenGL ES 的版本支持如下：</p><ul><li>Android 1.0 开始支持 OpenGL ES 1.0 及 1.1</li><li>Android 2.2 开始支持 OpenGL ES 2.0</li><li>Android 4.3 开始支持 OpenGL ES 3.0</li><li>Android 5.0 开始支持 OpenGL ES 3.1</li></ul><p>其中 OpenGL ES 1.0 是以 OpenGL 1.3 规范为基础的，OpenGL ES 1.1 是以 OpenGL 1.5 规范为基础的，而 OpenGL ES 2.0 基于 OpenGL 2.0 实现。2.x 版本相比 1.x 版本有较大差异，1.x 版本为 fixed function pipeline，即固定管线硬件，而 2.x 版本为 programmable pipeline，可编程管线硬件。</p><p>固定管线中原本由系统做的一部分工作，在可编程管线中必须需要自己写程序实现，具体程序为 vertex shader（顶点着色器）和 fragment shader（片元着色器）。</p><h4 id="OpenGL-上下文"><a href="#OpenGL-上下文" class="headerlink" title="OpenGL 上下文"></a>OpenGL 上下文</h4><p>OpenGL 是一个仅仅关注图像渲染的图像接口库，在渲染过程中它需要将顶点信息、纹理信息、编译好的着色器等渲染状态信息存储起来，而存储这些信息的数据结构就可以看作 OpenGL 的上下文。</p><p>调用任何 OpenGL 函数前，必须已经创建了 OpenGL Context，GL Context 存储了OpenGL 的状态变量以及其他渲染有关的信息。OpenGL 是个状态机，有很多状态变量，是个标准的过程式操作过程，改变状态会影响后续所有操作，这和面向对象的解耦原则不符，毕竟渲染本身就是个复杂的过程。OpenGL 采用 Client-Server 模型来解释 OpenGL 程序，即 Server 存储 GL Context（可能不止一个），Client 提出渲染请求，Server 给予响应，一般 Server 和 Client 都在我们的 PC 上，但 Server 和 Client 也可以是通过网络连接。</p><p>之后的渲染工作就要依赖这些渲染状态信息来完成，当一个上下文被销毁时，它所对应的 OpenGL 渲染工作也将结束。</p><h4 id="EGL"><a href="#EGL" class="headerlink" title="EGL"></a>EGL</h4><p>在 OpenGL 的设计中，OpenGL 是不负责管理窗口的，窗口的管理交由各个设备自己来完成，具体来讲，IOS 平台上使用 EAGL 提供本地平台对 OpenGL 的实现，在 Android 平台上使用 EGL 提供本地平台对 OpenGL 的实现。EGL 是 OpenGL ES 和 Android 底层平台视窗系统之间的接口，在 OpenGL 的输出与设备屏幕之间架接起一个桥梁，承担了为 OpenGL 提供上下文环境以及管理窗口的职责。</p><p>EGL 为双缓冲工作模式，即有一个 Back Frame Buffer 和一个 Front Frame Buffer，正常绘制的目标都是 Back Frame Buffer，绘制完成后再调用 eglSwapBuffer API，将绘制完毕的 FrameBuffer 交换到 Front Frame Buffer 并显示出来。</p><p>从代码层面来看，OpenGL ES 的 opengles 包下定义了平台无关的绘图指令，EGL（javax.microedition.khronos.egl）<br>则定义了控制 displays，contexts 以及 surfaces 的统一的平台接口。</p><ul><li>Display（EGLDisplay） 是对实际显示设备的抽象</li><li>Surface（EGLSurface）是对用来存储图像的内存区域 FrameBuffer 的抽象，包括 Color Buffer、Stencil Buffer、Depth Buffer</li><li>Context（EGLContext）存储 OpenGL ES 绘图的一些状态信息</li></ul><p><img src="../img/1.jpeg" alt></p><blockquote><p>使用 EGL 绘图的一般步骤：<br>获取 EGLDisplay 对象<br>初始化与 EGLDisplay 之间的连接<br>获取 EGLConfig 对象<br>创建 EGLContext 实例<br>创建 EGLSurface 实例<br>连接 EGLContext 和 EGLSurface<br>使用 GL 指令绘制图形<br>断开并释放与 EGLSurface 关联的 EGLContext 对象<br>删除 EGLSurface 对象<br>删除 EGLContext 对象<br>终止与 EGLDisplay 之间的连接</p></blockquote><p>一般来说在 Android 平台上开发 OpenGL ES 应用，无需按照上述步骤来绘制图形，可以直接使用 GLSurfaceView 控件，该控件提供了对 Display、Surface 以及 Context 的管理，大大简化了开发流程。</p><h4 id="OpenGL-纹理"><a href="#OpenGL-纹理" class="headerlink" title="OpenGL 纹理"></a>OpenGL 纹理</h4><p>纹理（Texture）是一个 2D 图片（甚至也有 1D 和 3D 的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的 3D 的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。</p><h1 id="OpenGL-坐标系理解"><a href="#OpenGL-坐标系理解" class="headerlink" title="OpenGL 坐标系理解"></a>OpenGL 坐标系理解</h1><p>OpenGL 要求输入的顶点坐标都是标准化设备坐标，即每个顶点的 x、y、z 都在 -1 到 1 之间，由标准化设备坐标转换为屏幕坐标的过程中会经历变换多个坐标系统，在这些特定的坐标系中，一些操作和计算可以更加方便。</p><p><img src="../img/15.jpg" alt></p><ul><li><strong>1. 局部坐标</strong><br>顶点坐标起始于局部空间（Local Space），在这里称为局部坐标，是以物体某一点为原点而建立的，该坐标系仅对该物体适用，用来简化对物体各部分坐标的描述。物体放到场景中时，各部分经历的坐标变换相同，相对位置不变。</li><li><strong>2. 世界坐标</strong><br>局部坐标通过模型矩阵进行位移、缩放、旋转，将物体从局部变换到世界空间，并和其他物体一起相对于世界的原点摆放。</li><li><strong>3. 观察坐标</strong><br>将世界空间坐标转化为用户视野前方的坐标，通常是由一系列的位移和旋转的组合（观察矩阵）来完成。</li><li><strong>4. 裁剪坐标</strong><br>坐标到达观察空间之后，通过投影矩阵会将指定范围内的坐标变换为标准化设备坐标的范围(-1.0, 1.0)，所有在范围外的坐标会被裁剪掉。</li><li><strong>5. 屏幕坐标</strong><br>将裁剪坐标位于(-1.0, 1.0)范围的坐标变换到由 glViewport 函数所定义的坐标范围内，最后变换出来的坐标将会送到光栅器，将其转化为片段。</li></ul><h1 id="OpenGL-渲染管线"><a href="#OpenGL-渲染管线" class="headerlink" title="OpenGL 渲染管线"></a>OpenGL 渲染管线</h1><p>OpenGL 渲染管线流程为：顶点数据 -&gt; 顶点着色器 -&gt; 图元装配 -&gt; 几何着色器 -&gt; 光栅化 -&gt; 片段着色器 -&gt; 逐片段处理 -&gt; 帧缓冲 </p><p><img src="../img/16.jpg" alt></p><p>OpenGL 渲染管线的流程其实就是 OpenGL 引擎渲染图像的流程，也就是说 OpenGL 引擎一步一步的将图片渲染到屏幕上的过程，渲染管线可以分为以下几个阶段：</p><ul><li><p><strong>1. 指定几何对象</strong><br>首先要了解几何图元的概念，几何图元就是点、直线、三角线等几何对象，在提供了顶点坐标后，还要确定具体要画的是点、线段还是三角形，这就要确定具体执行的绘制指令。比如 OpenGL 提供给开发者的绘制方法 glDrawArrays，这个方法的第一个参数就是指定绘制方式，可选值有：<br><strong>GL_POINTS</strong>：以点的形式进行绘制，通常用在绘制粒子效果的场景。<br><strong>GL_LINES</strong>：以线的形式进行绘制，通常用于绘制直线的场景。<br><strong>GL_TRIANGLE_STRIP</strong>：以三角形的形式进行绘制，所有二维图像的渲染都会使用这种方式。<br>具体选用哪一种绘制方式决定了 OpenGL 渲染管线的第一阶段应如何去绘制几何图元，这就是第一阶段指定几何对象。</p></li><li><p><strong>2. 顶点处理</strong><br>不论上面的几何图元是如何指定的，所有的几何数据都将会通过这个阶段。这个阶段的操作内容有：根据模型视图（即根据几何图元创建的物体）和投影矩阵进行变换来改变顶点的位置，根据纹理坐标与纹理矩阵来改变纹理坐标的位置，如果设计三维的渲染，还要处理光照计算和法线变换。<br>关键的操作就是顶点坐标变换及光照处理，每个顶点是分别单独处理的。这个阶段所接受的数据是每个顶点的属性特征，输出的则是变换后的顶点数据。</p></li><li><p><strong>3. 图元组装</strong><br>在顶点处理之后，顶点的全部属性都已经被确定。在这个阶段顶点将会根据应用程序设定的图元规则如 GL_POINTS 、GL_TRIANGLES(三角形) 等被组装成图元。</p></li><li><p><strong>4. 珊格化操作</strong><br>在图元组装后会传递过来图元数据，到目前为止，这些图元信息还只是顶点而已：顶点处都还没有“像素点”、直线段端点之间是空的、多边形的边和内部也是空的，光栅化的任务就是构造这些。<br>这个阶段会将图元数据分解成更小的单元并对应于帧缓冲区的各个像素，这些单元称为片元，一个片元可能包含窗口颜色、纹理坐标等属性。片元的属性则是图元上的顶点数据等经过插值而确定的，这就是珊格化操作，也就是确定好每一个片元是什么。</p></li><li><p><strong>5. 片元处理</strong><br>珊格化操作构造了像素点，这个阶段就是处理这些像素点，根据自己的业务处理（比如提亮、饱和度调节、对比度调节、高斯模糊等）来变换这个片元的颜色。</p></li><li><p><strong>6. 逐片段处理</strong><br>进行剪切、Alpha 测试、 模版测试、深度测试、混合等处理，这些操作将会最后影响其在帧缓冲区的颜色值。</p></li><li><p><strong>7. 帧缓冲操作</strong><br>此阶段主要执行帧缓冲的写入操作，也是渲染管线的最后一步，负责将最终的像素点写到帧缓冲区。</p></li></ul><p>上面提到 OpenGL ES 2.0 版本相比之前版本，提供了可编程的着色器来代替 1.x 版本渲染管线的某些阶段，具体为：</p><ul><li>Vertex Shader（顶点着色器）用于替换顶点处理阶段</li><li>Fragment Shader（片元着色器）用于替换片元处理阶段</li></ul><h1 id="OpenGL-着色语言"><a href="#OpenGL-着色语言" class="headerlink" title="OpenGL 着色语言"></a>OpenGL 着色语言</h1><p>OpenGL 着色语言 GLSL 全称为 OpenGL Shading Language，是为了实现着色器的功能而向开发人员提供的一种开发语言，语法与 C 语言类似，下面分为以下几点来学习 GLSL：</p><ul><li><strong>1. 基本数据类型</strong></li></ul><blockquote><p>void：空类型，即不返回任何值<br>bool：布尔类型，true/false<br>int：带符号的整数，signed integer<br>float：带符号的浮点数，signed scalar<br>vec2、vec3、vec4：n-维浮点数向量<br>bvec2、bvec3、bvec4：n-维布尔向量<br>ivec2、ivec3、ivec4：n-维整数向量<br>mat2、mat3、mat4：2x2、3x3、4x4 浮点数矩阵<br>sampler2D：2D 纹理<br>samplerCube：盒纹理</p></blockquote><p>其中 float 可指定精度：</p><blockquote><p>high：32bit，一般用于顶点坐标（vertex Coordinate）<br>medium：16bit，一般用于纹理坐标（texture Coordinate）<br>low：8bit，一般用于颜色表示（color）</p></blockquote><ul><li><strong>2. 变量修饰符</strong></li></ul><blockquote><p>none：(默认的可省略)本地变量，可读可写，函数的输入参数既是这种类型<br>const：声明变量或函数的参数为只读类型<br>attribute：用于保存顶点或法线数据,它可以在数据缓冲区中读取数据，仅能用于顶点着色器<br>uniform：在运行时 shader 无法改变 uniform 变量，一般用来放置程序传递给 shader 的变换矩阵，材质，光照参数等等，可用于顶点着色器和片元着色器<br>varying：用于修饰从顶点着色器向片元着色器传递的变量</p></blockquote><p>要注意全局变量限制符只能为 const、attribute、uniform 和 varying 中的某一个，不可复合。</p><ul><li><strong>3. 内置变量</strong></li></ul><p>GLSL 程序使用一些特殊的内置变量与硬件进行沟通，他们大致分成两种，一种是 input 类型,他负责向硬件(渲染管线)发送数据；另一种是 output 类型，负责向程序回传数据，以便编程时需要。<br>顶点着色器中 output 类型的内置变量如下：</p><blockquote><p>highp vec4  gl_Position：放置顶点坐标信息<br>mediump float gl_PointSize：需要绘制点的大小,(只在gl.POINTS模式下有效)</p></blockquote><p>片元着色器中 input 类型的内置变量如下：</p><blockquote><p>mediump vec4 gl_FragCoord;：片元在 framebuffer 画面的相对位置<br>bool gl_FrontFacing：标志当前图元是不是正面图元的一部分<br>mediump vec2 gl_PointCoord：经过插值计算后的纹理坐标,点的范围是0.0到1.0</p></blockquote><p>片元着色器中 output 类型的内置变量如下：</p><blockquote><p>mediump vec4 gl_FragColor：设置当前片点的颜色<br>mediump vec4 gl_FragData[n]：设置当前片点的颜色,使用glDrawBuffers数据数组</p></blockquote><ul><li><strong>4. 内置常量</strong></li></ul><p>GLSL 提供了一些内置的常量，用来说明当前系统的一些特性。有时我们需要针对这些特性，对 shader 程序进行优化，让程序兼容度更好。</p><p>顶点着色器中的内置常量如下：</p><blockquote><p>const mediump int gl_MaxVertexAttribs &gt;= 8：顶点着色器中可用的最大 attributes 数<br>const mediump int gl_MaxVertexUniformVectors &gt;= 128：顶点着色器中可用的最大 uniform vectors 数<br>const mediump int gl_MaxVaryingVectors &gt;= 8：顶点着色器中可用的最大 varying vectors 数<br>const mediump int gl_MaxVertexTextureImageUnits &gt;= 0：顶点着色器中可用的最大纹理单元数<br>const mediump int gl_MaxCombinedTextureImageUnits &gt;= 8：表示最多支持多少个纹理单元</p></blockquote><p>片元着色器中的内置常量如下：</p><blockquote><p>const mediump int gl_MaxTextureImageUnits &gt;= 8：片元着色器中能访问的最大纹理单元数<br>const mediump int gl_MaxFragmentUniformVectors &gt;= 16：片元着色器中可用的最大 uniform vectors 数<br>const mediump int gl_MaxDrawBuffers = 1：表示可用的 drawBuffers 数,在 OpenGL ES 2.0 中这个值为 1, 在将来的版本可能会有所变化</p></blockquote><p>上面这些值的大小取决于 OpenGL ES 在某设备上的具体实现。</p><ul><li><strong>5. 内置函数</strong></li></ul><blockquote><p>通用函数：abs、floor、min、max 等，参数可传入 float/vec2/vec3/vec4 类型<br>角度函数：sin、cos 等，参数可传入 float/vec2/vec3/vec4 类型<br>指数函数：pow、log 等，参数可传入 float/vec2/vec3/vec4 类型<br>几何函数：distance、dot 等，参数可传入 float/vec2/vec3/vec4 类型<br>矩阵函数：matrixCompMult，参数传入 mat 类型<br>向量函数：lessThan、equal 等，参数可传入 vec2/vec3/vec4 类型<br>纹理函数：texture2D、texture2DProj 等</p></blockquote><p>更详细的内置函数介绍可去官方文档查看，在此只简单列一下大致种类。</p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://item.jd.com/12292642.html" target="_blank" rel="noopener">《音视频开发进阶指南 - 基于Android与IOS平台的实践》</a><br><a href="https://baike.baidu.com/item/OpenGL/238984?fr=aladdin" target="_blank" rel="noopener">OpenGL 百度百科</a><br><a href="https://blog.csdn.net/qq_36383623/article/details/89315921" target="_blank" rel="noopener">OpenGL Context（渲染上下文）</a><br><a href="https://baike.baidu.com/item/OpenGL%20ES" target="_blank" rel="noopener">OpenGL ES 百度百科</a><br><a href="https://blog.csdn.net/weixin_41101173/article/details/80036809" target="_blank" rel="noopener">在Android中使用OpenGL ES进行开发第（一）节：概念先行</a><br><a href="https://blog.csdn.net/jackie03/article/details/7298682" target="_blank" rel="noopener">Android OpenGL ES（四）:关于EGL</a><br><a href="https://blog.csdn.net/qq_35370018/article/details/80156643" target="_blank" rel="noopener">初学OpenGL（4）：纹理</a><br><a href="https://blog.csdn.net/u011153817/article/details/51899091" target="_blank" rel="noopener">OpenGL各坐标系及模型矩阵、投影矩阵等的深入理解</a><br><a href="https://www.cnblogs.com/liangliangh/p/4116164.html" target="_blank" rel="noopener">OpenGL管线（用经典管线代说着色器内部）</a><br><a href="https://blog.csdn.net/jeffasd/article/details/77989274" target="_blank" rel="noopener">OpenGL shader GLSL 中文手册</a><br><a href="https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/" target="_blank" rel="noopener">坐标系统</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就听过大名鼎鼎的 OpenGL，却迟迟没有实践学习，有些惭愧。今天开始通过实践+博文方式学习掌握 OpenGL。此文对于 OpenGL 的学习分为以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL 基础概念&lt;/li&gt;
&lt;li&gt;OpenGL 坐标系理解&lt;/li&gt;
&lt;li&gt;OpenGL 渲染管线&lt;/li&gt;
&lt;li&gt;OpenGL 着色语言&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Android 知识简记</title>
    <link href="http://yoursite.com/c75061d/"/>
    <id>http://yoursite.com/c75061d/</id>
    <published>2019-06-01T12:42:37.000Z</published>
    <updated>2019-09-15T10:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Great hopes make great man&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>对 Android 开发的一点思考</title>
    <link href="http://yoursite.com/f713728e/"/>
    <id>http://yoursite.com/f713728e/</id>
    <published>2019-04-07T09:17:09.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>17 年毕业开始工作到现在已快两个年头，在实际项目开发的过程中，我对 Android 开发有了一些自己的思考。本着碰撞才会有火花、讨论才会进步的理念，我把对 Android 开发的一点思考分享出来，真诚的希望可以有不同的观点，在纠结反驳之中得到最优解，共同进步。</p><a id="more"></a><p>最初的时候，你是否是一个完美主义者，不容忍任何一点 warning 与叹号，if 必有 else，switch 必有 default，即使 else 和 default 中确实什么也不用处理，你也会添加一个 //do nothing 注释，表示这里的逻辑是经过充分考虑的，下次阅读程序时，告诉别人也告诉自己，这里的确什么也不用处理，可以快速跳过。</p><p>我想大多数开发者，都是经历过这种心态的，然后在繁忙的版本迭代中、在赶着回家的加班时、在愈来愈发的对自己的薪水不满时、在一次又一次看到团队中别人得过且过的代码时，渐渐的，就可能对“生活”妥协，丢掉了完美主义。</p><p>然而如果你有更高的追求，就要勇敢的战胜自己的感性。</p><h3 id="使用-IntDef、StringDef"><a href="#使用-IntDef、StringDef" class="headerlink" title="使用 IntDef、StringDef"></a>使用 IntDef、StringDef</h3><p>平时特常用的 View.setVisibility() 方法使用 IntDef 来规定参数的可选项，可以试想一下，假如没用 IntDef 会怎么样？对于初学者来说，可能要稍微阅读一下源码或查下资料才能知道 setVisibility 有哪些参数可以设置。你可能会觉得没什么差，因为你很清楚 setVisibility 方法有哪些参数可以设置。但若是程序中新增的一个方法呢？比如你新接触一个模块，某个界面有若干个跳转 Action，你得先找到定义这些 Action 的地方，而若一不小心将这些 Action 分散写在不同的地方，那对后面的维护和拓展可能就是一个灾难。</p><p>建议凡是符合语义的逻辑，都必须用 IntDef、StringDef 来约束，它比枚举节省内存，性能更优，其 RetentionPolicy.SOURCE 表示此注解只在源码中存在，编译时会剔除。你可以在 Android Studio 的 Live Templates 中添加 IntDef、StringDef 写法：<br><img src="../img/14.jpg" alt></p><h3 id="使用精准表达的变量类型"><a href="#使用精准表达的变量类型" class="headerlink" title="使用精准表达的变量类型"></a>使用精准表达的变量类型</h3><p>比如你需要声明一个变量来表示某个功能是否启用，譬如控制你的 App 是否展示广告，并且可以通过服务端在线下发开关来控制，如果没有接收到下发的开关，就根据地区来决定是否展示。</p><p>这种情况下你会使用什么类型的变量？</p><p>你可能会想到使用一个 int 类型变量来控制，然后需要给这个变量加上注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0：展示； 1：不展示； 2：未接收到在线开关，需要根据地区决定是否展示</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mShouldShowAd;</span><br></pre></td></tr></table></figure><p>以后每当改动到这部分逻辑，都需要查看一下这个变量数值对应的含义，随着时间的推移和代码量的增多，在此逻辑之上可能堆积了很多代码，然后就会出现各种各样的问题，别人可能在不存在的逻辑分支做了一些事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mShouldShowAd == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mShouldShowAd == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mShouldShowAd == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至可能对这个变量赋值 [0,2] 区间之外的数值！ 你可能对这个变量的意义很了解也绝不会用错，但你不能保证他人不会出现上面所说的荒唐的用法，因为这个变量类型并不能很精准的表达它的语义，也没有任何约束性。</p><p>我们可以怎样改善这种难维护、有风险的代码？</p><ul><li>可以使用 IntDef 规定这个变量的取值</li><li>可以换成 Boolean 类型，用 null 表示未获取到在线开关，恰好的表达语义并且易读、易维护</li></ul><h3 id="使用尽可能少的变量"><a href="#使用尽可能少的变量" class="headerlink" title="使用尽可能少的变量"></a>使用尽可能少的变量</h3><p>举个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mDebug = BuildConfig.DEBUG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mDebug) &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你是否写过这样的逻辑？明明已经存在了一个可以直接使用的变量条件，你仍然要重新定义。这个例子逻辑还十分简单，此变量是 final 类型的，不会出错。而如果是非 final 类型的变量，那就是强行增加了一个赋值联动的逻辑，埋下了隐患，后续如果出了问题，白白的增加了定位问题的路径与复杂度。</p><p>实际开发中我们可能自己都意识不到使用了不必要的变量，比如我们的服务端接口一般会有多个接口环境，那你的代码可能是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否是测试环境</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> sIsApiHostTest;</span><br><span class="line"><span class="comment">//是否是beta环境</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> sIsApiHostBeta;</span><br><span class="line"><span class="comment">//正式环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHost = <span class="string">"http://api.com/"</span>;</span><br><span class="line"><span class="comment">//测试环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHostTest = <span class="string">"http://test.api.com/"</span>;</span><br><span class="line"><span class="comment">//beta环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHostBeta = <span class="string">"http://beta.api.com/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是测试环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sIsApiHostTest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是beta环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiBeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sIsApiHostBeta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取接口域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApiHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isApiTest()) &#123;</span><br><span class="line">        <span class="keyword">return</span> sApiHostTest;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isApiBeta()) &#123;</span><br><span class="line">        <span class="keyword">return</span> sApiHostBeta;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sApiHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样看起来好像没什么问题，只要维护好 sIsApiHostTest、sIsApiHostBeta 这两个变量就行了。如果后面又添加了一个环境呢？又添加了三四个环境呢？是不是还要维护多个变量？这个逻辑可以通过减少变量来改善：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sCurApiHost;</span><br><span class="line"><span class="comment">//正式环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHost = <span class="string">"http://api.com/"</span>;</span><br><span class="line"><span class="comment">//测试环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHostTest = <span class="string">"http://test.api.com/"</span>;</span><br><span class="line"><span class="comment">//beta环境host</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sApiHostBeta = <span class="string">"http://beta.api.com/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是测试环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sApiHostTest.equals(sCurApiHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是beta环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiBeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sApiHostBeta.equals(sCurApiHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取接口域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApiHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sCurApiHost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再加上 StringDef 就完美了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@StringDef</span>(&#123;ApiHost.sApiHost, ApiHost.sApiHostTest, ApiHost.sApiHostBeta&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiHost &#123;</span><br><span class="line">    <span class="comment">//正式环境host</span></span><br><span class="line">    String sApiHost = <span class="string">"http://api.com/"</span>;</span><br><span class="line">    <span class="comment">//测试环境host</span></span><br><span class="line">    String sApiHostTest = <span class="string">"http://test.api.com/"</span>;</span><br><span class="line">    <span class="comment">//beta环境host</span></span><br><span class="line">    String sApiHostBeta = <span class="string">"http://beta.api.com/"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前环境host</span></span><br><span class="line"><span class="meta">@ApiHost</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sCurApiHost = ApiHost.sApiHost;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是测试环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ApiHost.sApiHostTest.equals(sCurApiHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是beta环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApiBeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ApiHost.sApiHostBeta.equals(sCurApiHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取接口域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiHost</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApiHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sCurApiHost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置接口域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiHost</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApiHost</span><span class="params">(@ApiHost String apiHost)</span> </span>&#123;</span><br><span class="line">    sCurApiHost = apiHost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道你有没有感受到易读性、可维护性、拓展性都蹭蹭蹭的往上涨呢？</p><h3 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h3><p>同时接受多个数据源数据的逻辑相比只接受一个数据源的数据需要考虑时序性等问题，要复杂很多。打个比方，可以把数据源当作你的直接上级，上级会不定时的分配任务给你做，如果你有多个上级，一个让你做任务 A，一个让你做任务 B，且 A 需要在 B 之前完成，你要怎么办？两个上级都让你做任务 A，但是只用做一次，你要怎么办？</p><p>在安卓中较为典型的场景就是同时加载网络和本地缓存数据到 UI 上，你的 UI 上展示的数据来自不同的地方，你需要考虑不同数据源之间如何协作。谷歌推出的 Jetpack 开发指南上推荐我们使用单一数据源，假如你的网络数据也需要缓存的话，那你的实现逻辑应该是这样：</p><ul><li>加载网络数据，返回后插入到本地<ul><li>统一从本地取数据展示到 UI 上</li></ul></li></ul><p>这点和上面说的“使用尽可能少的变量”有相通之处，都是尽量规避使用多个条件变量对程序产生影响的逻辑。</p><h3 id="职责分离"><a href="#职责分离" class="headerlink" title="职责分离"></a>职责分离</h3><p>强烈建议什么类里就干什么事，别把逻辑都揉到一块儿，这样随着代码量的增加，会愈发的难以维护，到最后就变成一颗存在重大隐患的地雷，看见就头疼。</p><p>举个例子，比如你要自定义一个 View，那就像系统控件一样，只负责一个控件该负责的事，处理一下渲染、展示，把手势交互通过接口开放出来，把数据的获取写在数据仓库中。这样如果数据展示出了问题，可以很快的定位到是数据获取出了问题，还是渲染展示出了问题；如果这个控件的渲染展示是经过验证的，之后就几乎不用改动此控件，至少你有机会可以将你的自定义 View 写的像系统的控件一样稳定。</p><p>这里再推荐一下谷歌的 Jetpack - MVVM 全家桶，MVC 真的是不易读、难维护、问题多、很简陋。</p><h3 id="回归最初的完美主义"><a href="#回归最初的完美主义" class="headerlink" title="回归最初的完美主义"></a>回归最初的完美主义</h3><p>希望你我可以战胜感性，不向“生活”妥协，让优秀成为准则和习惯，回归最初的完美主义。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;17 年毕业开始工作到现在已快两个年头，在实际项目开发的过程中，我对 Android 开发有了一些自己的思考。本着碰撞才会有火花、讨论才会进步的理念，我把对 Android 开发的一点思考分享出来，真诚的希望可以有不同的观点，在纠结反驳之中得到最优解，共同进步。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="开发模式" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一个轻量的 Android 端日志打印记录库</title>
    <link href="http://yoursite.com/f346f34f/"/>
    <id>http://yoursite.com/f346f34f/</id>
    <published>2019-03-31T06:22:56.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p> 地址：<a href="https://github.com/yhaolpz/PLog" target="_blank" rel="noopener">https://github.com/yhaolpz/PLog</a></p><p><img src="../img/2.jpg" alt></p><p>PLog 即 Persistence Log，可持久化日志于文件，便于还原用户使用场景，解决异常问题。</p><h2 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h2><p>1.mmap 方式高效写入，规避 IO 操作带来的性能消耗</p><p>2.兼容多进程并发文件写入，日志文件保存在各自的进程目录下</p><p>3.通过 zip 压缩并加密，节省上报流量，保护日志私密性</p><p>4.内置收集 Activity/Fragment 生命周期、崩溃、网络状态等常用信息：</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PLog.Config config = <span class="keyword">new</span> PLog.Config.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .logDir(mLogDirPath) <span class="comment">//日志存放目录，默认优先存储于SD卡</span></span><br><span class="line">        .logcatDebugLevel(PLog.DebugLevel.DEBUG) <span class="comment">//允许输出到Logcat的级别</span></span><br><span class="line">        .recordDebugLevel(PLog.DebugLevel.DEBUG) <span class="comment">//允许记录到日志文件的级别</span></span><br><span class="line">        .fileSizeLimitDay(<span class="number">15</span>) <span class="comment">//单天日志文件存储上限</span></span><br><span class="line">        .overdueDay(<span class="number">3</span>) <span class="comment">//日志文件过期天数</span></span><br><span class="line">        .cipherKey(<span class="string">"123456"</span>) <span class="comment">//日志密钥</span></span><br><span class="line">        .build();</span><br><span class="line">PLog.init(config);</span><br></pre></td></tr></table></figure><h5 id="2-打印"><a href="#2-打印" class="headerlink" title="2.打印"></a>2.打印</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通打印</span></span><br><span class="line">PLog.d(<span class="string">"wyh"</span>, <span class="string">"This is a log that can be recorded in a file"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Format</span></span><br><span class="line">PLog.d(<span class="string">"wyh"</span>, <span class="string">"This is a %s"</span>, <span class="string">"log"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组类型</span></span><br><span class="line">PLog.d(<span class="string">"wyh"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;);</span><br><span class="line"><span class="comment">//output: [a,b,c]</span></span><br></pre></td></tr></table></figure><h5 id="3-只记录到日志文件"><a href="#3-只记录到日志文件" class="headerlink" title="3.只记录到日志文件"></a>3.只记录到日志文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLog.record(PLog.DebugLevel.DEBUG,<span class="string">"wyh"</span>,<span class="string">"This is a log that can only be recorded in files"</span>);</span><br></pre></td></tr></table></figure><h5 id="4-只输出到logcat"><a href="#4-只输出到logcat" class="headerlink" title="4.只输出到logcat"></a>4.只输出到logcat</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLog.print(PLog.DebugLevel.DEBUG,<span class="string">"wyh"</span>,<span class="string">"This is a log"</span>);</span><br></pre></td></tr></table></figure><h5 id="5-触发上传"><a href="#5-触发上传" class="headerlink" title="5.触发上传"></a>5.触发上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PLog.upload(<span class="keyword">new</span> UploadListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(@NonNull List&lt;File&gt; files)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上传到你的服务端</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建议上传成功及时删除日志文件</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">             <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="存储逻辑"><a href="#存储逻辑" class="headerlink" title="存储逻辑"></a>存储逻辑</h2><h4 id="日志文件类型"><a href="#日志文件类型" class="headerlink" title="日志文件类型"></a>日志文件类型</h4><p>为更好的区分并管理日志，将从写入到上传经历不同状态的日志文件划分为以下类型：</p><ul><li>“-mmap” 正在写入的日志文件，不可上传，文件命名为: yyyy-MM-dd-mmap</li><li>“-mmap-up” 写入完成的日志文件，可压缩上传，文件命名为: yyyy-MM-dd-mmap-up</li><li>“-mmap-up-old” 单天较早写入完成的日志大小，可压缩上传，文件命名为: yyyy-MM-dd-mmap-up-old</li><li>“-mmap-up-last” 触发上传时超出存储上限部分的日志文件，上传操作的中间态，不会长久存在，可压缩上传，文件命名为: yyyy-MM-dd-mmap-up-last</li><li>“.zip” 已压缩加密的日志文件，可直接上传，文件命名为: yyyy-MM-dd HH:mm:ss.zip</li></ul><h4 id="控制日志时效"><a href="#控制日志时效" class="headerlink" title="控制日志时效"></a>控制日志时效</h4><p>暂定保留最近三天的日志，更早的日志将会在特定时机自动清除当前进程目录所有类型过期的日志文件，这些时机包括：</p><ul><li>初始化时</li><li>触发上传重命名日志文件添加”-up”时</li><li>触发上传压缩所有标记为”-up”的可上传的日志时</li><li>触发上传扫描所有”.zip”可上传的日志时</li></ul><h4 id="控制存储上限"><a href="#控制存储上限" class="headerlink" title="控制存储上限"></a>控制存储上限</h4><p>理论上我们应该避免无意义的日志记录滥用，控制日志体积，但为避免极端情况下大量日志写入导致存储爆炸，通过将日志文件分为两片控制存储上限。</p><p>譬如规定单天日志存储体积上限为 MAX，逻辑大致为下：</p><ul><li>当天日志文件 -mmap 写入体积达 MAX/3 时就会停止写入，并命名为 -mmap-up，然后新建文件 -mmap 继续写入</li><li>当写入达 MAX/3 时，先将已存在的 -mmap-up 命名为 -mmap-up-old，再将刚写满的 -mmap 命名为 -mmap-up，然后新建文件 -mmap 继续写入</li><li>当写入达 MAX/3 时，先删除 -mmap-up-old 文件，将已存在的 -mmap-up 命名为 -mmap-up-old，再将刚写满的 -mmap 命名为 -mmap-up，然后新建文件 -mmap 继续写入</li></ul><p>按照此逻辑，假定当天写入日志体积为 SIZE，可以将单天日志存储情况划分为以下几种状态：</p><ul><li>a. SIZE &lt; MAX/3</li><li>b. MAX/3 &lt; SIZE &lt; MAX*2/3</li><li>c. MAX*2/3 &lt; SIZE &lt; MAX</li></ul><p>当处于 a 状态时触发上传： -mmap –&gt; -mmap-up –&gt; zip<br>当处于 b 状态时触发上传： -mmap-up –&gt; -mmap-up-old –&gt; zip ;  -mmap –&gt; -mmap-up –&gt; zip<br>当处于 c 状态时触发上传： -mmap-up-old –&gt; zip ;  -mmap-up –&gt; zip ;  -mmap –&gt; -mmap-up-last –&gt; zip</p><p>为了防止频繁的判断日志体积，可设置每隔一定写入条数后判断一次进行优化，目前设置间隔为 1000 条。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 地址：&lt;a href=&quot;https://github.com/yhaolpz/PLog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/yhaolpz/PLog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;PLog 即 Persistence Log，可持久化日志于文件，便于还原用户使用场景，解决异常问题。&lt;/p&gt;
&lt;h2 id=&quot;特性：&quot;&gt;&lt;a href=&quot;#特性：&quot; class=&quot;headerlink&quot; title=&quot;特性：&quot;&gt;&lt;/a&gt;特性：&lt;/h2&gt;&lt;p&gt;1.mmap 方式高效写入，规避 IO 操作带来的性能消耗&lt;/p&gt;
&lt;p&gt;2.兼容多进程并发文件写入，日志文件保存在各自的进程目录下&lt;/p&gt;
&lt;p&gt;3.通过 zip 压缩并加密，节省上报流量，保护日志私密性&lt;/p&gt;
&lt;p&gt;4.内置收集 Activity/Fragment 生命周期、崩溃、网络状态等常用信息：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>单例的线程安全及序列化问题</title>
    <link href="http://yoursite.com/1516a551/"/>
    <id>http://yoursite.com/1516a551/</id>
    <published>2019-03-05T15:04:44.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式可以说是最简单的设计模式了，但在使用时也有一些问题需要注意，比如线程安全性和序列化破坏。本文以几个问题为出发点，分析延迟加载、线程安全以及序列化三个方面，深入了解一下单例模式的各种姿势，以便在今后使用时追求极致性能  ⊙﹏⊙‖∣°</p><a id="more"></a><ul><li>饿汉方式单例到底有多“饿”？</li><li>静态内部类为什么是延迟加载的？</li><li>枚举方式单例是延迟加载的吗？</li><li>饿汉、静态内部类、枚举方式单例为什么是线程安全的？</li><li>序列化为什么会破坏单例模式？</li><li>怎么防止序列化破坏单例模式？</li><li>枚举方式单例是怎么避免序列化破坏的？</li></ul><p>开始正文前先思考下以上问题，如果你都掌握了，就可以点叉出去了。</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><h4 id="饿汉方式"><a href="#饿汉方式" class="headerlink" title="饿汉方式"></a>饿汉方式</h4><p>先来看一下饿汉方式实现的单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与饿汉方式一并提起的往往还有懒汉方式，对比而言，懒汉方式具有延迟加载（这里的加载指创建 Singleton 实例）的优点。这容易让人对饿汉方式有一个恶劣的刻板印象：它的性能很不好！没有使用它的时候它就会初始化，白白占用资源！</p><p>现在我们来思考一下，饿汉方式单例到底有多“饿”？它到底什么时候会初始化呢？我们知道类加载的时候会初始化静态资源，所以饿汉方式的初始化时机就是类加载时机，回顾一下类加载的时机：</p><ul><li>使用new关键字实例化对象</li><li>调用一个类的静态方法</li><li>读取一个类的静态字段（被 final 修饰已在编译期把结果放在常量池的静态字段除外）</li></ul><p>当使用单例时，往往都是先调用 getInstance() 获取单例，几乎不会涉及其他的静态方法或字段，所以大多数情况下，饿汉方式同懒汉方式一样是延迟加载的！如果你的单例只暴露了 getInstance() 方法（个人感觉也是比较规范的写法），那就放心的使用饿汉方式吧！如果别人 diss 了你的饿汉方式，那就 diss 回去让他去复习类加载机制 &gt;_&lt;||| </p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类方式单例实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比饿汉方式，这种方式实现的单例即使加载了 Singleton 类，也不一定会创建 Singleton 实例，因为 Singleton 的静态引用放到了静态内部类中，只有静态内部类被加载了，Singleton 实例才会被创建。</p><p>如果 Singleton 中对外只暴露了 getInstance 方法，那和饿汉方式无异；如果还暴露了其他的静态方法或字段，那相比饿汉方式，可以更精准的实现延迟加载。</p><h4 id="枚举方式"><a href="#枚举方式" class="headerlink" title="枚举方式"></a>枚举方式</h4><p>枚举方式实现的单例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种形式或许我们无从下手，但反编译后就明白了，相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，枚举方式实现的单例和饿汉方式差不多，延迟加载时机依赖类加载时机。</p><p>这里需要搞清楚被 static、final 修饰的编译期常量、运行期常量。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>这部分内容其实十分简单。</p><p>类加载的逻辑位于 synchronized 代码块中，是线程安全的，而饿汉、静态内部类以及枚举方式实现的单例初始化都处于类加载时机，所以它们都是线程安全的。</p><p>懒汉方式的初始化与类加载时机无关，所以要自行保证线程安全。</p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>我们期望单例模式可以实现只创建一个实例，通过特殊手段创建出其他的实例，就对单例模式造成了破坏，序列化就会破坏单例模式。</p><p>假如我们的单例实现了 serializable 接口，序列化时会通过反射调用无参数的构造方法创建一个新的实例，这时就要重写 readResolve 方法防止序列化破坏单例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止序列化破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通的 Java 类的反序列化过程中，会通过反射创建新的实例。而枚举在序列化的时候仅是将枚举对象的 name 属性输出到结果中，反序列化的时候则是通过 java.lang.Enum 的 valueOf 方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的，禁用了writeObject、readObject、readObjectNoData、writeReplace 和 readResolve 等方法。</p><p>枚举的反序列化并不是通过反射实现的，所以也就不会发生由于反序列化导致的单例破坏问题。</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><p>最后集中回答下开头的问题：</p><ul><li>饿汉方式单例到底有多“饿”？<br>大多数情况下，饿汉方式同懒汉方式一样时延迟加载的</li><li>静态内部类为什么是延迟加载的？<br>依赖类加载机制，加载静态内部类时才会初始化</li><li>枚举方式单例是延迟加载的吗？<br>与饿汉方式类似，类加载时初始化</li><li>饿汉、静态内部类、枚举方式单例为什么是线程安全的？<br>因为它们在类加载时初始化，而类加载是线程安全的</li><li>序列化为什么会破坏单例模式？<br>普通的 Java 类的反序列化过程中，会通过反射创建新的实例</li><li>怎么防止序列化破坏单例模式？<br>使用枚举或重写 readResolve 方法</li><li>枚举方式单例是怎么避免序列化破坏的？<br>依赖枚举自身特殊的序列化机制</li></ul><h6 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h6><p><a href="https://www.hollischuang.com/archives/1144" target="_blank" rel="noopener">单例与序列化的那些事儿</a><br><a href="https://www.hollischuang.com/archives/2498" target="_blank" rel="noopener">为什么我墙裂建议大家使用枚举来实现单例</a><br><a href="https://www.hollischuang.com/archives/197" target="_blank" rel="noopener">深度分析Java的枚举类型—-枚举的线程安全性及序列化问题</a><br><a href="https://stackoverflow.com/questions/16771373/singleton-via-enum-way-is-lazy-initialized" target="_blank" rel="noopener">stackoverflow：singleton-via-enum-way-is-lazy-initialized</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式可以说是最简单的设计模式了，但在使用时也有一些问题需要注意，比如线程安全性和序列化破坏。本文以几个问题为出发点，分析延迟加载、线程安全以及序列化三个方面，深入了解一下单例模式的各种姿势，以便在今后使用时追求极致性能  ⊙﹏⊙‖∣°&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[剑指offer] 机器人走格子之回溯法</title>
    <link href="http://yoursite.com/e89c3ed9/"/>
    <id>http://yoursite.com/e89c3ed9/</id>
    <published>2019-03-03T12:14:56.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><a id="more"></a><p><strong>核心思路：</strong></p><ol><li>从(0,0)开始走，每成功走一步标记当前位置为true,然后从当前位置往四个方向探索，返回1 + 4 个方向的探索值之和。</li><li>探索时，判断当前节点是否可达的标准为：1）当前节点在矩阵内；2）当前节点未被访问过；3）当前节点满足limit限制。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">    <span class="keyword">return</span> countingSteps(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>, visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countingSteps</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= rows || c &lt; <span class="number">0</span> || c &gt;= cols</span><br><span class="line">            || visited[r][c] || bitSum(r) + bitSum(c) &gt; limit) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    visited[r][c] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> countingSteps(limit, rows, cols, r - <span class="number">1</span>, c, visited)</span><br><span class="line">            + countingSteps(limit, rows, cols, r, c - <span class="number">1</span>, visited)</span><br><span class="line">            + countingSteps(limit, rows, cols, r + <span class="number">1</span>, c, visited)</span><br><span class="line">            + countingSteps(limit, rows, cols, r, c + <span class="number">1</span>, visited)</span><br><span class="line">            + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bitSum</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        count += t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？&lt;/p&gt;
    
    </summary>
    
      <category term="算法之美" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>[剑指offer] 二维数组中的查找</title>
    <link href="http://yoursite.com/ff815187/"/>
    <id>http://yoursite.com/ff815187/</id>
    <published>2019-02-28T15:03:46.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span> || array[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = array[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] anArray : array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == anArray[<span class="number">0</span>] || target == anArray[len - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; anArray[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; anArray[len - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> a : anArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法之美" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>简洁明了的刘海屏适配方案</title>
    <link href="http://yoursite.com/2f41d4d1/"/>
    <id>http://yoursite.com/2f41d4d1/</id>
    <published>2019-02-26T15:11:04.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于刘海屏适配的文章不少，可讲清楚的却没几篇，大多是拷贝文档、长篇大论，甚至热情的贴图告诉你什么是刘海屏，到最后你仍不确定到底是怎样的一个适配方案，才能让你的 app 真正的适配所有的刘海屏机型。</p><p>看到这篇文章你就无需再怨恨各大厂商的跟风“刘海”了，因为刘海屏的适配十分简单。</p><a id="more"></a><p>ok，废话说完了，开始适配。</p><p>首先要清楚的是哪些界面需要适配刘海屏：</p><ul><li>有状态栏的界面：刘海区域会显示状态栏，无需适配</li><li>全屏界面：刘海区域可能遮挡内容，需要适配</li></ul><p>如果你的应用里所有界面都有状态栏，那么恭喜你，你不用做任何操作，状态栏就那么自然的显示在刘海区域，毫无违和，刘海屏已适配完毕，可以点叉出去了。</p><p>不幸的是，你的应用中很大几率会有全屏界面，所谓的刘海屏适配，也正是针对这些全屏界面。</p><p>如果你什么都不做，默认规则不允许全屏界面内容显示到刘海区域，即刘海屏区域会保留一条黑边，你的全屏界面会在刘海下方展示，这看起来好像也是可以接受的，然后你竟说服产品达成共识，“无为而治”才是最强大的刘海屏适配方案！</p><p>但有些手机厂商（譬如oppo）不开心了，我辛辛苦苦研发的刘海屏手机，你们这些开发者竟直接放弃刘海区域！然后就在你的全屏界面下方加了一条提示：“全屏显示”，当用户点击开启后，强行把你的全屏界面显示到刘海区域，然后一切都乱套了…</p><p>嗯～ “无为而治”行不通。</p><p>只能允许全屏界面内容显示到刘海区域了，参考各大厂商的适配文档，我们可以知道如何允许，比如华为机型只需在 AndroidManifest 中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;android.notch_support&quot;</span><br><span class="line">    android:value=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>配置后，华为机型上的全屏界面就会显示到刘海区域了，但这个刘海，是可能挡住我们全屏界面中的内容的。这时需要将全屏界面中的视图元素适当下移，保证不会被刘海遮挡住，就 ok 了。</p><p>这里我们搞清楚：允许全屏界面内容显示到刘海区域的机型，才需要将全屏界面中的视图元素适当下移。</p><p>比如若只允许华为机型全屏界面内容显示到刘海区域，那只有华为的刘海屏机型才需要将全屏界面中的视图元素适当下移，其他厂商的刘海屏机型则不需要下移。</p><p>如果允许华为、小米、oppo、vivo 全屏界面内容显示到刘海区域，那么华为、小米、oppo、vivo 刘海屏机型需要将全屏界面中的视图元素适当下移。</p><p>另外也不一定要通过全屏界面中的视图元素适当下移方式来适配刘海屏，如果产品形态允许的话，你也可以让该界面显示状态栏啊。</p><p>至此刘海屏适配完毕，是不是很简单！？</p><p>最后代码奉上，拿走不谢：</p><h4 id="允许全屏界面内容显示到刘海区域配置："><a href="#允许全屏界面内容显示到刘海区域配置：" class="headerlink" title="允许全屏界面内容显示到刘海区域配置："></a>允许全屏界面内容显示到刘海区域配置：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--允许绘制到oppo、vivo刘海屏机型的刘海区域 --&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;android.max_aspect&quot;</span><br><span class="line">    android:value=&quot;2.2&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 允许绘制到华为刘海屏机型的刘海区域 --&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;android.notch_support&quot;</span><br><span class="line">    android:value=&quot;true&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 允许绘制到小米刘海屏机型的刘海区域 --&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;notch.config&quot;</span><br><span class="line">    android:value=&quot;portrait&quot; /&gt;</span><br></pre></td></tr></table></figure><p>上面在 AndroidManifest 的配置在 Android 9.0 之前有效，9.0 系统针对刘海屏制定了新的 api，默认保留一条黑边，即不允许绘制到刘海区域。所以如果你还没有适配 Android 9.0，那在判断是否是允许全屏界面内容显示到刘海区域的刘海屏机型时，就要加上版本判断。</p><h4 id="判断是否是允许全屏界面内容显示到刘海区域的刘海屏机型："><a href="#判断是否是允许全屏界面内容显示到刘海区域的刘海屏机型：" class="headerlink" title="判断是否是允许全屏界面内容显示到刘海区域的刘海屏机型："></a>判断是否是允许全屏界面内容显示到刘海区域的刘海屏机型：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CutoutUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean sAllowDisplayToCutout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为允许全屏界面显示内容到刘海区域的刘海屏机型（与AndroidManifest中配置对应）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">allowDisplayToCutout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sAllowDisplayToCutout == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.O_MR1) &#123;</span><br><span class="line">                <span class="comment">// 9.0系统全屏界面默认会保留黑边，不允许显示内容到刘海区域</span></span><br><span class="line">                <span class="keyword">return</span> sAllowDisplayToCutoutDevice = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Context context = App.get();</span><br><span class="line">            <span class="keyword">if</span> (hasCutout_Huawei(context)) &#123;</span><br><span class="line">                <span class="keyword">return</span> sAllowDisplayToCutout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hasCutout_OPPO(context)) &#123;</span><br><span class="line">                <span class="keyword">return</span> sAllowDisplayToCutout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hasCutout_VIVO(context)) &#123;</span><br><span class="line">                <span class="keyword">return</span> sAllowDisplayToCutout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hasCutout_XIAOMI(context)) &#123;</span><br><span class="line">                <span class="keyword">return</span> sAllowDisplayToCutout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sAllowDisplayToCutout = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sAllowDisplayToCutout;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是华为刘海屏机型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCutout_Huawei</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Build.MANUFACTURER.equalsIgnoreCase(<span class="string">"HUAWEI"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader cl = context.getClassLoader();</span><br><span class="line">            Class HwNotchSizeUtil = cl.loadClass(<span class="string">"com.huawei.android.util.HwNotchSizeUtil"</span>);</span><br><span class="line">            <span class="keyword">if</span> (HwNotchSizeUtil != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Method get = HwNotchSizeUtil.getMethod(<span class="string">"hasNotchInScreen"</span>);</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">boolean</span>) get.invoke(HwNotchSizeUtil);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是oppo刘海屏机型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCutout_OPPO</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Build.MANUFACTURER.equalsIgnoreCase(<span class="string">"oppo"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context.getPackageManager().hasSystemFeature(<span class="string">"com.oppo.feature.screen.heteromorphism"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是vivo刘海屏机型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCutout_VIVO</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Build.MANUFACTURER.equalsIgnoreCase(<span class="string">"vivo"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader cl = context.getClassLoader();</span><br><span class="line">            <span class="meta">@SuppressLint</span>(<span class="string">"PrivateApi"</span>)</span><br><span class="line">            Class ftFeatureUtil = cl.loadClass(<span class="string">"android.util.FtFeature"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ftFeatureUtil != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Method get = ftFeatureUtil.getMethod(<span class="string">"isFeatureSupport"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">boolean</span>) get.invoke(ftFeatureUtil, <span class="number">0x00000020</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是小米刘海屏机型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCutout_XIAOMI</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Build.MANUFACTURER.equalsIgnoreCase(<span class="string">"xiaomi"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader cl = context.getClassLoader();</span><br><span class="line">            <span class="meta">@SuppressLint</span>(<span class="string">"PrivateApi"</span>)</span><br><span class="line">            Class SystemProperties = cl.loadClass(<span class="string">"android.os.SystemProperties"</span>);</span><br><span class="line">            Class[] paramTypes = <span class="keyword">new</span> Class[<span class="number">2</span>];</span><br><span class="line">            paramTypes[<span class="number">0</span>] = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            paramTypes[<span class="number">1</span>] = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            Method getInt = SystemProperties.getMethod(<span class="string">"getInt"</span>, paramTypes);</span><br><span class="line">            <span class="comment">//参数</span></span><br><span class="line">            Object[] params = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">            params[<span class="number">0</span>] = <span class="string">"ro.miui.notch"</span>;</span><br><span class="line">            params[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> (Integer) getInt.invoke(SystemProperties, params) == <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到，不一定要通过全屏界面中的视图元素适当下移方式来适配刘海屏，如果产品形态允许的话，也可以让该界面显示状态栏。</p><p>显示状态栏的方案是较为通用简单的，或者说，在一个应用中，一些全屏界面往往是允许使用显示状态栏的方案来适配的，如果你考虑使用这种方案，那便会是这种效果：</p><ul><li>在你的应用中，你期望某些全屏界面在刘海屏机型上必须全屏展示，那你就自行将界面元素适当下移，从而避免被刘海遮挡；而某些全屏界面不是非要全屏显示，允许在刘海屏机型显示状态栏，那就通过显示状态栏的方式，从而避免被刘海遮挡。</li></ul><p>为了实现这种效果，我们需要标记区分哪些界面必须全屏展示、哪些界面允许显示状态栏。这里提供一种实现方式，让允许显示状态栏的界面 Activity 继承一个接口，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CutoutAdapt</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 ActivityLifecycleCallbacks 回调，统一适配允许通过显示状态栏的全屏界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是允许全屏显示到刘海屏区域的刘海屏机型</span></span><br><span class="line">    <span class="keyword">if</span> (CutoutUtil.allowDisplayToCutout()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFullScreen(activity)) &#123;</span><br><span class="line">            <span class="comment">// 如果允许通过显示状态栏方式适配刘海屏</span></span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> CutoutAdapt) &#123;</span><br><span class="line">                <span class="comment">// 显示状态栏</span></span><br><span class="line">                StatusBarUtil.showStatusbar(activity.getWindow());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 需自行将该界面视图元素下移，否则可能会被刘海遮挡</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非全屏界面无需适配刘海屏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上关于刘海屏适配的文章不少，可讲清楚的却没几篇，大多是拷贝文档、长篇大论，甚至热情的贴图告诉你什么是刘海屏，到最后你仍不确定到底是怎样的一个适配方案，才能让你的 app 真正的适配所有的刘海屏机型。&lt;/p&gt;
&lt;p&gt;看到这篇文章你就无需再怨恨各大厂商的跟风“刘海”了，因为刘海屏的适配十分简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="刘海屏适配" scheme="http://yoursite.com/tags/%E5%88%98%E6%B5%B7%E5%B1%8F%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 展示 gif 原理</title>
    <link href="http://yoursite.com/3fe9ef36/"/>
    <id>http://yoursite.com/3fe9ef36/</id>
    <published>2019-02-17T10:03:14.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在展示 gif 时，即使不调用 asGif 方法，Glide 也能识别出 gif 类型并正常展示。解码逻辑位于 Downsampler 的 decode 方法中，我们先从这里开始，看看 Glide 是如何识别 gif 类型的。decode 方法中调用了 decodeFromWrappedStreams 方法开始实际解码逻辑：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">decodeFromWrappedStreams</span><span class="params">(InputStream is,</span></span></span><br><span class="line"><span class="function"><span class="params">    BitmapFactory.Options options, DownsampleStrategy downsampleStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">    DecodeFormat decodeFormat, <span class="keyword">boolean</span> isHardwareConfigAllowed, <span class="keyword">int</span> requestedWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> requestedHeight, <span class="keyword">boolean</span> fixBitmapToRequestedDimensions,</span></span></span><br><span class="line"><span class="function"><span class="params">    DecodeCallbacks callbacks)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] sourceDimensions = getDimensions(is, options, callbacks, bitmapPool);</span><br><span class="line">  <span class="keyword">int</span> sourceWidth = sourceDimensions[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">int</span> sourceHeight = sourceDimensions[<span class="number">1</span>];</span><br><span class="line">  String sourceMimeType = options.outMimeType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we failed to obtain the image dimensions, we may end up with an incorrectly sized Bitmap,</span></span><br><span class="line">  <span class="comment">// so we want to use a mutable Bitmap type. One way this can happen is if the image header is so</span></span><br><span class="line">  <span class="comment">// large (10mb+) that our attempt to use inJustDecodeBounds fails and we're forced to decode the</span></span><br><span class="line">  <span class="comment">// full size image.</span></span><br><span class="line">  <span class="keyword">if</span> (sourceWidth == -<span class="number">1</span> || sourceHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">    isHardwareConfigAllowed = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> orientation = ImageHeaderParserUtils.getOrientation(parsers, is, byteArrayPool);</span><br><span class="line">  <span class="keyword">int</span> degreesToRotate = TransformationUtils.getExifOrientationDegrees(orientation);</span><br><span class="line">  <span class="keyword">boolean</span> isExifOrientationRequired = TransformationUtils.isExifOrientationRequired(orientation);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> targetWidth = requestedWidth == Target.SIZE_ORIGINAL ? sourceWidth : requestedWidth;</span><br><span class="line">  <span class="keyword">int</span> targetHeight = requestedHeight == Target.SIZE_ORIGINAL ? sourceHeight : requestedHeight;</span><br><span class="line"></span><br><span class="line">  ImageType imageType = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 省略下面的解码逻辑代码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rotated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到解码开始前，准备了图片角度、输出尺寸的信息，并通过 ImageHeaderParserUtils 获取了图片类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageType imageType = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool);</span><br></pre></td></tr></table></figure></p><p>Glide 中定义了以下图片类型:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The format of the image data including whether or not the image may include transparent</span></span><br><span class="line"><span class="comment"> * pixels.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> ImageType &#123;</span><br><span class="line">  GIF(<span class="keyword">true</span>),</span><br><span class="line">  JPEG(<span class="keyword">false</span>),</span><br><span class="line">  RAW(<span class="keyword">false</span>),</span><br><span class="line">  <span class="comment">/** PNG type with alpha. */</span></span><br><span class="line">  PNG_A(<span class="keyword">true</span>),</span><br><span class="line">  <span class="comment">/** PNG type without alpha. */</span></span><br><span class="line">  PNG(<span class="keyword">false</span>),</span><br><span class="line">  <span class="comment">/** WebP type with alpha. */</span></span><br><span class="line">  WEBP_A(<span class="keyword">true</span>),</span><br><span class="line">  <span class="comment">/** WebP type without alpha. */</span></span><br><span class="line">  WEBP(<span class="keyword">false</span>),</span><br><span class="line">  <span class="comment">/** Unrecognized type. */</span></span><br><span class="line">  UNKNOWN(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> hasAlpha;</span><br><span class="line"></span><br><span class="line">  ImageType(<span class="keyword">boolean</span> hasAlpha) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hasAlpha = hasAlpha;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAlpha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hasAlpha;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而实际获取图片类型的逻辑位于 DefaultImageHeaderParser 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ImageType <span class="title">getType</span><span class="params">(Reader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> firstTwoBytes = reader.getUInt16();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// JPEG.</span></span><br><span class="line">  <span class="keyword">if</span> (firstTwoBytes == EXIF_MAGIC_NUMBER) &#123;</span><br><span class="line">    <span class="keyword">return</span> JPEG;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> firstFourBytes = (firstTwoBytes &lt;&lt; <span class="number">16</span> &amp; <span class="number">0xFFFF0000</span>) | (reader.getUInt16() &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="comment">// PNG.</span></span><br><span class="line">  <span class="keyword">if</span> (firstFourBytes == PNG_HEADER) &#123;</span><br><span class="line">    <span class="comment">// See: http://stackoverflow.com/questions/2057923/how-to-check-a-png-for-grayscale-alpha</span></span><br><span class="line">    <span class="comment">// -color-type</span></span><br><span class="line">    reader.skip(<span class="number">25</span> - <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">int</span> alpha = reader.getByte();</span><br><span class="line">    <span class="comment">// A RGB indexed PNG can also have transparency. Better safe than sorry!</span></span><br><span class="line">    <span class="keyword">return</span> alpha &gt;= <span class="number">3</span> ? PNG_A : PNG;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GIF from first 3 bytes.</span></span><br><span class="line">  <span class="keyword">if</span> (firstFourBytes &gt;&gt; <span class="number">8</span> == GIF_HEADER) &#123;</span><br><span class="line">    <span class="keyword">return</span> GIF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// WebP (reads up to 21 bytes). See https://developers.google.com/speed/webp/docs/riff_container</span></span><br><span class="line">  <span class="comment">// for details.</span></span><br><span class="line">  <span class="keyword">if</span> (firstFourBytes != RIFF_HEADER) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Bytes 4 - 7 contain length information. Skip these.</span></span><br><span class="line">  reader.skip(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> thirdFourBytes =</span><br><span class="line">      (reader.getUInt16() &lt;&lt; <span class="number">16</span> &amp; <span class="number">0xFFFF0000</span>) | (reader.getUInt16() &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> (thirdFourBytes != WEBP_HEADER) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> fourthFourBytes =</span><br><span class="line">      (reader.getUInt16() &lt;&lt; <span class="number">16</span> &amp; <span class="number">0xFFFF0000</span>) | (reader.getUInt16() &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> ((fourthFourBytes &amp; VP8_HEADER_MASK) != VP8_HEADER) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((fourthFourBytes &amp; VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_EXTENDED) &#123;</span><br><span class="line">    <span class="comment">// Skip some more length bytes and check for transparency/alpha flag.</span></span><br><span class="line">    reader.skip(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> (reader.getByte() &amp; WEBP_EXTENDED_ALPHA_FLAG) != <span class="number">0</span> ? ImageType.WEBP_A : ImageType.WEBP;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((fourthFourBytes &amp; VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_LOSSLESS) &#123;</span><br><span class="line">    <span class="comment">// See chromium.googlesource.com/webm/libwebp/+/master/doc/webp-lossless-bitstream-spec.txt</span></span><br><span class="line">    <span class="comment">// for more info.</span></span><br><span class="line">    reader.skip(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> (reader.getByte() &amp; WEBP_LOSSLESS_ALPHA_FLAG) != <span class="number">0</span> ? ImageType.WEBP_A : ImageType.WEBP;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ImageType.WEBP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这里是通过文件头标示来获取图片类型的，而 gif 文件头如下：<br><img src="https://upload-images.jianshu.io/upload_images/4679478-588f3a9d994f274a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看代码，Glide 中便是通过 0x474946 文件头来判断的。</p><p>Glide 中将 gif 类型图片封装成了 GifDrawable，在 ByteBufferGifDecoder 中可以看到 GifDrawable 的生成逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> GifDrawableResource <span class="title">decode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ByteBuffer byteBuffer, <span class="keyword">int</span> width, <span class="keyword">int</span> height, GifHeaderParser parser, Options options)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> GifHeader header = parser.parseHeader();</span><br><span class="line">    <span class="keyword">if</span> (header.getNumFrames() &lt;= <span class="number">0</span> || header.getStatus() != GifDecoder.STATUS_OK) &#123;</span><br><span class="line">      <span class="comment">// If we couldn't decode the GIF, we will end up with a frame count of 0.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bitmap.Config config = options.get(GifOptions.DECODE_FORMAT) == DecodeFormat.PREFER_RGB_565</span><br><span class="line">        ? Bitmap.Config.RGB_565 : Bitmap.Config.ARGB_8888;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sampleSize = getSampleSize(header, width, height);</span><br><span class="line">    GifDecoder gifDecoder = gifDecoderFactory.build(provider, header, byteBuffer, sampleSize);</span><br><span class="line">    gifDecoder.setDefaultBitmapConfig(config);</span><br><span class="line">    gifDecoder.advance();</span><br><span class="line">    Bitmap firstFrame = gifDecoder.getNextFrame();</span><br><span class="line">    <span class="keyword">if</span> (firstFrame == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Transformation&lt;Bitmap&gt; unitTransformation = UnitTransformation.get();</span><br><span class="line"></span><br><span class="line">    GifDrawable gifDrawable =</span><br><span class="line">        <span class="keyword">new</span> GifDrawable(context, gifDecoder, unitTransformation, width, height, firstFrame);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GifDrawableResource(gifDrawable);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      Log.v(TAG, <span class="string">"Decoded GIF from stream in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此已经获取到 GifDrawable ，GifDrawable 中持有一个 GifFrameLoader，而 GifFrameLoader 中持有了 gif 解码器 StandardGifDecoder 。由此可以得出 gif 的展示逻辑就封装于 GifDrawable 中，主要通过 GifFrameLoader 实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在展示 gif 时，即使不调用 asGif 方法，Glide 也能识别出 gif 类型并正常展示。解码逻辑位于 Downsampler 的 decode 方法中，我们先从这里开始，看看 Glide 是如何识别 gif 类型的。decode 方法中调用了 decodeFromWrappedStreams 方法开始实际解码逻辑：&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 缩略图使用及原理</title>
    <link href="http://yoursite.com/2455213e/"/>
    <id>http://yoursite.com/2455213e/</id>
    <published>2019-02-17T08:25:28.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>缩略图的使用可参考<a href="https://muyangmin.github.io/glide-docs-cn/doc/options.html#缩略图-thumbnail-请求" target="_blank" rel="noopener">官方文档</a>。</p><p>若使用简化方式设置缩略图：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context).load(imgUrl).thumbnail(<span class="number">0.2f</span>).into(imageView);</span><br></pre></td></tr></table></figure><p>发起缩略图请求的关键逻辑位于 RequestBuilder 的 buildThumbnailRequestRecursive 方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.</span></span><br><span class="line">  ThumbnailRequestCoordinator coordinator = <span class="keyword">new</span> ThumbnailRequestCoordinator(parentCoordinator);</span><br><span class="line"></span><br><span class="line">  Request fullRequest =</span><br><span class="line">      obtainRequest(</span><br><span class="line">          target,</span><br><span class="line">          targetListener,</span><br><span class="line">          requestOptions,</span><br><span class="line">          coordinator,</span><br><span class="line">          transitionOptions,</span><br><span class="line">          priority,</span><br><span class="line">          overrideWidth,</span><br><span class="line">          overrideHeight);</span><br><span class="line"></span><br><span class="line">  RequestOptions thumbnailOptions = requestOptions.clone()</span><br><span class="line">      .sizeMultiplier(thumbSizeMultiplier);</span><br><span class="line">  Request thumbnailRequest =</span><br><span class="line">      obtainRequest(</span><br><span class="line">          target,</span><br><span class="line">          targetListener,</span><br><span class="line">          thumbnailOptions,</span><br><span class="line">          coordinator,</span><br><span class="line">          transitionOptions,</span><br><span class="line">          getThumbnailPriority(priority),</span><br><span class="line">          overrideWidth,</span><br><span class="line">          overrideHeight);</span><br><span class="line"></span><br><span class="line">  coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class="line">  <span class="keyword">return</span> coordinator;</span><br></pre></td></tr></table></figure></p><p>其中 fullRequest、thumbnailRequest 分别为原图、缩略图请求，ThumbnailRequestCoordinator 就是字面意思，专门用于协调原图、缩略图的请求，并合并成一个请求，可以看到在构建缩略图请求时，为了尽量让缩略图比原图加载的更快一点，调用 getThumbnailPriority 方法调整了请求优先级：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Priority <span class="title">getThumbnailPriority</span><span class="params">(@NonNull Priority current)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOW:</span><br><span class="line">      <span class="keyword">return</span> Priority.NORMAL;</span><br><span class="line">    <span class="keyword">case</span> NORMAL:</span><br><span class="line">      <span class="keyword">return</span> Priority.HIGH;</span><br><span class="line">    <span class="keyword">case</span> HIGH:</span><br><span class="line">    <span class="keyword">case</span> IMMEDIATE:</span><br><span class="line">      <span class="keyword">return</span> Priority.IMMEDIATE;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"unknown priority: "</span> + requestOptions.getPriority());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加载完数据后，Glide 会分别解码缩略图、原图两种尺寸的图片，具体解码实现位于 Downsampler 的 decode 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource&lt;Bitmap&gt; <span class="title">decode</span><span class="params">(InputStream is, <span class="keyword">int</span> requestedWidth, <span class="keyword">int</span> requestedHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    Options options, DecodeCallbacks callbacks)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  Preconditions.checkArgument(is.markSupported(), <span class="string">"You must provide an InputStream that supports"</span></span><br><span class="line">      + <span class="string">" mark()"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">byte</span>[] bytesForOptions = byteArrayPool.get(ArrayPool.STANDARD_BUFFER_SIZE_BYTES, <span class="keyword">byte</span>[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  BitmapFactory.Options bitmapFactoryOptions = getDefaultOptions();</span><br><span class="line">  bitmapFactoryOptions.inTempStorage = bytesForOptions;</span><br><span class="line"></span><br><span class="line">  DecodeFormat decodeFormat = options.get(DECODE_FORMAT);</span><br><span class="line">  DownsampleStrategy downsampleStrategy = options.get(DownsampleStrategy.OPTION);</span><br><span class="line">  <span class="keyword">boolean</span> fixBitmapToRequestedDimensions = options.get(FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS);</span><br><span class="line">  <span class="keyword">boolean</span> isHardwareConfigAllowed =</span><br><span class="line">    options.get(ALLOW_HARDWARE_CONFIG) != <span class="keyword">null</span> &amp;&amp; options.get(ALLOW_HARDWARE_CONFIG);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Bitmap result = decodeFromWrappedStreams(is, bitmapFactoryOptions,</span><br><span class="line">        downsampleStrategy, decodeFormat, isHardwareConfigAllowed, requestedWidth,</span><br><span class="line">        requestedHeight, fixBitmapToRequestedDimensions, callbacks);</span><br><span class="line">    <span class="keyword">return</span> BitmapResource.obtain(result, bitmapPool);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    releaseOptions(bitmapFactoryOptions);</span><br><span class="line">    byteArrayPool.put(bytesForOptions);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解码完后会调用到 DecodeJob 的 notifyComplete 方法，进一步调用到 EngineJob 的 onResourceReady 方法，在 onResourceReady 方法中通过 handle 转到主线程，然后调用到 EngineJob 的 handleResultOnMainThread 方法，接着调用 SingleRequest 的 onResourceReady 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Resource&lt;R&gt; resource, R result, DataSource dataSource)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// We must call isFirstReadyResource before setting status.</span></span><br><span class="line">   <span class="keyword">boolean</span> isFirstResource = isFirstReadyResource();</span><br><span class="line">   status = Status.COMPLETE;</span><br><span class="line">   <span class="keyword">this</span>.resource = resource;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (glideContext.getLogLevel() &lt;= Log.DEBUG) &#123;</span><br><span class="line">     Log.d(GLIDE_TAG, <span class="string">"Finished loading "</span> + result.getClass().getSimpleName() + <span class="string">" from "</span></span><br><span class="line">         + dataSource + <span class="string">" for "</span> + model + <span class="string">" with size ["</span> + width + <span class="string">"x"</span> + height + <span class="string">"] in "</span></span><br><span class="line">         + LogTime.getElapsedMillis(startTime) + <span class="string">" ms"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   isCallingCallbacks = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">boolean</span> anyListenerHandledUpdatingTarget = <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (requestListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">for</span> (RequestListener&lt;R&gt; listener : requestListeners) &#123;</span><br><span class="line">         anyListenerHandledUpdatingTarget |=</span><br><span class="line">             listener.onResourceReady(result, model, target, dataSource, isFirstResource);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     anyListenerHandledUpdatingTarget |=</span><br><span class="line">         targetListener != <span class="keyword">null</span></span><br><span class="line">             &amp;&amp; targetListener.onResourceReady(result, model, target, dataSource, isFirstResource);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!anyListenerHandledUpdatingTarget) &#123;</span><br><span class="line">       Transition&lt;? <span class="keyword">super</span> R&gt; animation =</span><br><span class="line">           animationFactory.build(dataSource, isFirstResource);</span><br><span class="line">       target.onResourceRReady(result, animation);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     isCallingCallbacks = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   notifyLoadSuccess();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到此方法中终于将加载资源回调给 Target 了，调用栈大致如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/4679478-08af148de8e8a2c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以上不止是设置缩略图时的加载流程，没有缩略图时走的也是这个流程。我们知道图片缩略图不过是通过 BitmapFactory.Options  解码一张尺寸较小、质量较差的图罢了，而 Glide 除了支持配置图片缩略图，还支持配置本地视频缩略图。取视频缩略图的关键逻辑位于 VideoDecoder 的 decodeFrame 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">decodeFrame</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     MediaMetadataRetriever mediaMetadataRetriever,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">long</span> frameTimeMicros,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> frameOption,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> outWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> outHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">     DownsampleStrategy strategy)</span> </span>&#123;</span><br><span class="line">   Bitmap result = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">// Arguably we should handle the case where just width or just height is set to</span></span><br><span class="line">   <span class="comment">// Target.SIZE_ORIGINAL. Up to and including OMR1, MediaMetadataRetriever defaults to setting</span></span><br><span class="line">   <span class="comment">// the dimensions to the display width and height if they aren't specified (ie</span></span><br><span class="line">   <span class="comment">// getScaledFrameAtTime is not used). Given that this is an optimization only if</span></span><br><span class="line">   <span class="comment">// Target.SIZE_ORIGINAL is not used and not using getScaledFrameAtTime ever would match the</span></span><br><span class="line">   <span class="comment">// behavior of Glide in all versions of Android prior to OMR1, it's probably fine for now.</span></span><br><span class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= VERSION_CODES.O_MR1</span><br><span class="line">       &amp;&amp; outWidth != Target.SIZE_ORIGINAL</span><br><span class="line">       &amp;&amp; outHeight != Target.SIZE_ORIGINAL</span><br><span class="line">       &amp;&amp; strategy != DownsampleStrategy.NONE) &#123;</span><br><span class="line">     result =</span><br><span class="line">         decodeScaledFrame(</span><br><span class="line">             mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight, strategy);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">     result = decodeOriginalFrame(mediaMetadataRetriever, frameTimeMicros, frameOption);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在 Android 8.1 系统上支持直接获取缩放的视频缩略图，8.1 以下则直接获取帧原图，分别通过 MediaMetadataRetriever 的 getScaledFrameAtTime 、getFrameAtTime 获取。MediaMetadataRetriever 是 Android 提供的类，用来获取本地和网络 Media 文件信息，提供了用于从输入媒体文件检索帧和元数据的统一接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缩略图的使用可参考&lt;a href=&quot;https://muyangmin.github.io/glide-docs-cn/doc/options.html#缩略图-thumbnail-请求&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;若使用简化方式设置缩略图：&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 请求优先级及原理</title>
    <link href="http://yoursite.com/aeb1195c/"/>
    <id>http://yoursite.com/aeb1195c/</id>
    <published>2019-02-17T08:24:53.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>若一个界面中需要展示多张图片，我们可能会期望某张图片优先加载，这就需要设置 Glide 的请求优先级， Glide 中提供四种优先级：</p><a id="more"></a><ul><li>Priority.LOW</li><li>Priority.NORMAL</li><li>Priority.HIGH</li><li>Priority.IMMEDIATE</li></ul><p>使用十分简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestOptions options = <span class="keyword">new</span> RequestOptions().priority(Priority.HIGH);</span><br><span class="line">Glide.with(context).load(imgUrl).apply(options).into(imageView);</span><br></pre></td></tr></table></figure></p><p>下面来分析一下我们配置的 Priority.HIGH 到底是如何生效的，跟踪发现优先级参数 priority 会被传入到 RequestBuilder 的 buildThumbnailRequestRecursive 方法，其中主要逻辑如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildThumbnailRequestRecursive</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">     RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">     @Nullable RequestCoordinator parentCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">     TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">     Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">     RequestOptions requestOptions)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (thumbnailBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="comment">// 缩略图相关，先忽略</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (thumbSizeMultiplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="comment">// 缩略图相关，先忽略</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// Base case: no thumbnail.</span></span><br><span class="line">     <span class="keyword">return</span> obtainRequest(</span><br><span class="line">         target,</span><br><span class="line">         targetListener,</span><br><span class="line">         requestOptions,</span><br><span class="line">         parentCoordinator,</span><br><span class="line">         transitionOptions,</span><br><span class="line">         priority,</span><br><span class="line">         overrideWidth,</span><br><span class="line">         overrideHeight);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>由于并未设置 thumbnail，先忽略缩略图相关逻辑，此方法中会调用到 obtainRequest 方法，继续跟踪，发现我们配置的 priority 参数在 SingleRequest 中的 onSizeReady 方法中被传入到 Engine 的 load 方法中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">     Object model,</span></span></span><br><span class="line"><span class="function"><span class="params">     Key signature,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">     Class&lt;?&gt; resourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">     Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">     Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">     DiskCacheStrategy diskCacheStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">     Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> isTransformationRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> isScaleOnlyOrNoTransform,</span></span></span><br><span class="line"><span class="function"><span class="params">     Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> isMemoryCacheable,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> useAnimationPool,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> onlyRetrieveFromCache,</span></span></span><br><span class="line"><span class="function"><span class="params">     ResourceCallback cb)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// ...省略其他逻辑</span></span><br><span class="line"></span><br><span class="line">   DecodeJob&lt;R&gt; decodeJob =</span><br><span class="line">       decodeJobFactory.build(</span><br><span class="line">           glideContext,</span><br><span class="line">           model,</span><br><span class="line">           key,</span><br><span class="line">           signature,</span><br><span class="line">           width,</span><br><span class="line">           height,</span><br><span class="line">           resourceClass,</span><br><span class="line">           transcodeClass,</span><br><span class="line">           priority,</span><br><span class="line">           diskCacheStrategy,</span><br><span class="line">           transformations,</span><br><span class="line">           isTransformationRequired,</span><br><span class="line">           isScaleOnlyOrNoTransform,</span><br><span class="line">           onlyRetrieveFromCache,</span><br><span class="line">           options,</span><br><span class="line">           engineJob);</span><br><span class="line"></span><br><span class="line">   jobs.put(key, engineJob);</span><br><span class="line"></span><br><span class="line">   engineJob.addCallback(cb);</span><br><span class="line">   engineJob.start(decodeJob);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">     logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, key);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这里在构建 DecodeJob 时将优先级配置传入，最终传入到 DecodeJob 和 DecodeHelper 中，其中 DecodeHelper 被 DecodeJob 持有。</p><p>接下来分析 priority 参数分别在什么时候被用到，首先看 DecodeJob 中持有的 priority，其仅在实现 Comparable 接口时用到，这个比较容易理解，可以通过对 DecodeJob 排序来实现优先级的调整。DecodeHelper 中持有的 priority 在 DataFetcher 的 loadData 方法中被传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadData</span><span class="params">(@NonNull Priority priority, @NonNull DataCallback&lt;? <span class="keyword">super</span> T&gt; callback)</span></span>;</span><br></pre></td></tr></table></figure><p>DataFetch 用于加载数据，其实现有很多：</p><p><img src="https://upload-images.jianshu.io/upload_images/4679478-f7b5a4e8759e4930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但并不是所有方法都能应用优先级的，这取决与具体的业务组件，比如 OkHttp 不支持请求优先级设置，直接忽略了 priority 参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(@NonNull Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull <span class="keyword">final</span> DataCallback&lt;? <span class="keyword">super</span> InputStream&gt; callback)</span> </span>&#123;</span><br><span class="line">  Request.Builder requestBuilder = <span class="keyword">new</span> Request.Builder().url(url.toStringUrl());</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; headerEntry : url.getHeaders().entrySet()) &#123;</span><br><span class="line">    String key = headerEntry.getKey();</span><br><span class="line">    requestBuilder.addHeader(key, headerEntry.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">  Request request = requestBuilder.build();</span><br><span class="line">  <span class="keyword">this</span>.callback = callback;</span><br><span class="line"></span><br><span class="line">  call = client.newCall(request);</span><br><span class="line">  call.enqueue(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而 Volley 就支持请求优先级：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(@NonNull Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull DataCallback&lt;? <span class="keyword">super</span> InputStream&gt; callback)</span> </span>&#123;</span><br><span class="line">  request = requestFactory.create(url.toStringUrl(), callback, glideToVolleyPriority(priority),</span><br><span class="line">      url.getHeaders());</span><br><span class="line">  requestQueue.add(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此也可以得出设置请求优先级并不是必然生效的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;若一个界面中需要展示多张图片，我们可能会期望某张图片优先加载，这就需要设置 Glide 的请求优先级， Glide 中提供四种优先级：&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 图片格式及内存优化</title>
    <link href="http://yoursite.com/da1371bf/"/>
    <id>http://yoursite.com/da1371bf/</id>
    <published>2019-02-17T08:24:22.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得刚接触 Glide 时，总会看到这个描述：</p><p><em>Glide 默认的 Bitmap 格式是 RGB_565，相比于 Picasso，加载的图片质量略差，但比 ARGB_8888 格式的内存开销要小一半。</em></p><p>而现在再讲这个特性就不对了，因为在 Glide v4 中，默认的 Bitmap 格式改为了 ARGB_8888。准确来说是默认的解码格式由 PREFER_RGB_565 改为了 PREFER_ARGB_8888，具体可参考 <a href="https://muyangmin.github.io/glide-docs-cn/doc/migrating.html#解码格式" target="_blank" rel="noopener">官方文档</a> 。</p><a id="more"></a><p>Glide 中可配置的解码格式只提供了 PREFER_RGB_565 和 PREFER_ARGB_8888 两个选项，而 Android Bitmap Config 中提供了 RGB_565、ARGB_8888、ARGB_4444 以及 HARDWARE 等 7 种格式，这让我们在使用层面上有一定程度的简化， Glide 内部自行适配了其他解码格式，比如若配置为 PREFER_ARGB_8888，在 Android 8.0 系统上就会尝试开启硬件位图编码格式，对应代码于 DecodeJob 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Options <span class="title">getOptionsWithHardwareConfig</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">  Options options = <span class="keyword">this</span>.options;</span><br><span class="line">  <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.O) &#123;</span><br><span class="line">    <span class="keyword">return</span> options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> isHardwareConfigSafe =</span><br><span class="line">      dataSource == DataSource.RESOURCE_DISK_CACHE || decodeHelper.isScaleOnlyOrNoTransform();</span><br><span class="line">  Boolean isHardwareConfigAllowed = options.get(Downsampler.ALLOW_HARDWARE_CONFIG);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If allow hardware config is defined, we can use it if it's set to false or if it's safe to</span></span><br><span class="line">  <span class="comment">// use the hardware config for the request.</span></span><br><span class="line">  <span class="keyword">if</span> (isHardwareConfigAllowed != <span class="keyword">null</span> &amp;&amp; (!isHardwareConfigAllowed || isHardwareConfigSafe)) &#123;</span><br><span class="line">    <span class="keyword">return</span> options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If allow hardware config is undefined or is set to true but it's unsafe for us to use the</span></span><br><span class="line">  <span class="comment">// hardware config for this request, we need to override the config.</span></span><br><span class="line">  options = <span class="keyword">new</span> Options();</span><br><span class="line">  options.putAll(<span class="keyword">this</span>.options);</span><br><span class="line">  options.set(Downsampler.ALLOW_HARDWARE_CONFIG, isHardwareConfigSafe);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方文档关于 <a href="https://muyangmin.github.io/glide-docs-cn/doc/hardwarebitmaps.html" target="_blank" rel="noopener">硬件位图</a> 的介绍也比较清晰，就不过多描述了。另外 Android 端涉及到图片内存，必须了解的一个问题就是：<a href="https://zhuanlan.zhihu.com/p/20732309?refer=bennyhuo" target="_blank" rel="noopener">你的 Bitmap 究竟占多大内存？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得刚接触 Glide 时，总会看到这个描述：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Glide 默认的 Bitmap 格式是 RGB_565，相比于 Picasso，加载的图片质量略差，但比 ARGB_8888 格式的内存开销要小一半。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而现在再讲这个特性就不对了，因为在 Glide v4 中，默认的 Bitmap 格式改为了 ARGB_8888。准确来说是默认的解码格式由 PREFER_RGB_565 改为了 PREFER_ARGB_8888，具体可参考 &lt;a href=&quot;https://muyangmin.github.io/glide-docs-cn/doc/migrating.html#解码格式&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 加载图片到通知栏和应用小部件中</title>
    <link href="http://yoursite.com/693b387a/"/>
    <id>http://yoursite.com/693b387a/</id>
    <published>2019-02-17T08:23:48.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>上面说到的下载、预加载主要通过 RequestFutureTarget、PreloadTarget 实现，平时使用 Glide 直接加载图片到 ImageView 的方式则是通过 ImageViewTarget，Glide 中还提供了 NotificationTarget 和 AppWidgetTarget 来实现加载图片到通知栏和应用小部件中。使用方法十分简单，下面列出加载图片到通知栏的实现示例：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载图片到通知栏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadNotificationImg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构建一个通知栏</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> NOTIFICATION_ID = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> RemoteViews rv = <span class="keyword">new</span> RemoteViews(context.getPackageName(), R.layout.remoteview_notification);</span><br><span class="line">    rv.setImageViewResource(R.id.iv, R.mipmap.ic_launcher);</span><br><span class="line">    rv.setTextViewText(R.id.tv, <span class="string">"Short Message"</span>);</span><br><span class="line">    NotificationCompat.Builder mBuilder =</span><br><span class="line">            <span class="keyword">new</span> NotificationCompat.Builder(context, <span class="string">"channel_id"</span>)</span><br><span class="line">                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                    .setContentTitle(<span class="string">"Content Title"</span>)</span><br><span class="line">                    .setContentText(<span class="string">"Content Text"</span>)</span><br><span class="line">                    .setContent(rv)</span><br><span class="line">                    .setPriority(NotificationCompat.PRIORITY_HIGH);</span><br><span class="line">    <span class="keyword">final</span> Notification notification = mBuilder.build();</span><br><span class="line">    notification.bigContentView = rv;</span><br><span class="line">    NotificationManager service = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">    service.notify(NOTIFICATION_ID, notification);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载图片到通知栏</span></span><br><span class="line">    NotificationTarget notificationTarget = <span class="keyword">new</span> NotificationTarget(</span><br><span class="line">            context,</span><br><span class="line">            R.id.iv,</span><br><span class="line">            rv,</span><br><span class="line">            notification,</span><br><span class="line">            NOTIFICATION_ID);</span><br><span class="line">    Glide.with(context).asBitmap().load(imgUrl).into(notificationTarget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际的更新方法封装于 NotificationTarget 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Updates the Notification after the Bitmap resource is loaded.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  NotificationManager manager =</span><br><span class="line">      (NotificationManager) <span class="keyword">this</span>.context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">  Preconditions.checkNotNull(manager)</span><br><span class="line">      .notify(<span class="keyword">this</span>.notificationTag, <span class="keyword">this</span>.notificationId, <span class="keyword">this</span>.notification);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 AppWidgetTarget 加载图片到应用小部件中与此类似，这些均继承自  <a href="https://muyangmin.github.io/glide-docs-cn/doc/targets.html" target="_blank" rel="noopener">Target</a> 接口，了解原理后，我们可以自定义 Target 来随意的定制功能了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上面说到的下载、预加载主要通过 RequestFutureTarget、PreloadTarget 实现，平时使用 Glide 直接加载图片到 ImageView 的方式则是通过 ImageViewTarget，Glide 中还提供了 NotificationTarget 和 AppWidgetTarget 来实现加载图片到通知栏和应用小部件中。使用方法十分简单，下面列出加载图片到通知栏的实现示例：&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 下载及预加载</title>
    <link href="http://yoursite.com/a7bea0ed/"/>
    <id>http://yoursite.com/a7bea0ed/</id>
    <published>2019-02-17T08:21:41.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>下载的标准写法如下，也是官方示例写法：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FutureTarget&lt;File&gt; target = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        target = Glide.with(context)</span><br><span class="line">                .downloadOnly()</span><br><span class="line">                .load(imgUrl)</span><br><span class="line">                .submit();</span><br><span class="line">        <span class="keyword">final</span> File cacheFile = target.get();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  默认会下载到磁盘缓存中,理论上不应对缓存文件进行编辑、删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"download: "</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 这里要调用cancel方法取消等待操作并释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.cancel(<span class="keyword">true</span>); <span class="comment">// 若传true则允许中断操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方式要自行开子线程，你可能会觉得稍显麻烦，直接调用 listener 方法监听 onResourceReady 回调岂不是更简单？其实不是的，由于要拿到 FutureTarget 调用其 cancel 方法，若监听 onResourceReady 代码逻辑会更复杂。</p><p>对于 FutureTarget.get() 方法，并不是调用时才会去加载数据，调用 submit 方法后就已经开始去加载数据了，get 方法最终会调用到 RequestFutureTarget 的 doGet 方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> R <span class="title">doGet</span><span class="params">(Long timeoutMillis)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (assertBackgroundThread &amp;&amp; !isDone()) &#123;</span><br><span class="line">    Util.assertBackgroundThread();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loadFailed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(exception);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultReceived) &#123;</span><br><span class="line">    <span class="keyword">return</span> resource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (timeoutMillis == <span class="keyword">null</span>) &#123;</span><br><span class="line">    waiter.waitForTimeout(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeoutMillis &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> deadline = now + timeoutMillis;</span><br><span class="line">    <span class="keyword">while</span> (!isDone() &amp;&amp; now &lt; deadline) &#123;</span><br><span class="line">      waiter.waitForTimeout(<span class="keyword">this</span>, deadline - now);</span><br><span class="line">      now = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loadFailed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(exception);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!resultReceived) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 get 方法内部并没有加载数据的逻辑， RequestFutureTarget 内部通过锁实现了 get 方法的阻塞调用，当资源加载完毕后 onResourceReady 中会解除阻塞：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    R resource, Object model, Target&lt;R&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// We might get a null result.</span></span><br><span class="line">  resultReceived = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.resource = resource;</span><br><span class="line">  waiter.notifyAll(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了下载 File 类型以外，还可以指定下载类型，比如下载 Bitmap：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadBitmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestOptions DOWNLOAD_ONLY_OPTIONS = RequestOptions</span><br><span class="line">            .diskCacheStrategyOf(DiskCacheStrategy.DATA) <span class="comment">//这边其实可以根据业务场景配置，如果是网络图片一般需要缓存</span></span><br><span class="line">            .priority(Priority.LOW) <span class="comment">// 设置优先级</span></span><br><span class="line">            .skipMemoryCache(<span class="keyword">true</span>);</span><br><span class="line">    FutureTarget&lt;Bitmap&gt; target = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        target = Glide.with(context)</span><br><span class="line">                .asBitmap()</span><br><span class="line">                .apply(DOWNLOAD_ONLY_OPTIONS)</span><br><span class="line">                .load(imgUrl)</span><br><span class="line">                .submit();</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = target.get();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"download: "</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 这里要调用cancel方法取消等待操作并释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.cancel(<span class="keyword">true</span>); <span class="comment">// 若传true则允许中断操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的 DOWNLOAD_ONLY_OPTIONS 配置其实就是 downloadOnly 方法应用的配置。</p><p>实现预加载十分简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context).load(imgUrl).preload();</span><br></pre></td></tr></table></figure></p><p>关键代码位于 PreloadTarget 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PreloadTarget</span>&lt;<span class="title">Z</span>&gt; <span class="keyword">extends</span> <span class="title">SimpleTarget</span>&lt;<span class="title">Z</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_CLEAR = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler HANDLER = <span class="keyword">new</span> Handler(Looper.getMainLooper(), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (message.what == MESSAGE_CLEAR) &#123;</span><br><span class="line">        ((PreloadTarget&lt;?&gt;) message.obj).clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RequestManager requestManager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;Z&gt; <span class="function">PreloadTarget&lt;Z&gt; <span class="title">obtain</span><span class="params">(RequestManager requestManager, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PreloadTarget&lt;&gt;(requestManager, width, height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">PreloadTarget</span><span class="params">(RequestManager requestManager, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(width, height);</span><br><span class="line">    <span class="keyword">this</span>.requestManager = requestManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(@NonNull Z resource, @Nullable Transition&lt;? <span class="keyword">super</span> Z&gt; transition)</span> </span>&#123;</span><br><span class="line">    HANDLER.obtainMessage(MESSAGE_CLEAR, <span class="keyword">this</span>).sendToTarget();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">  <span class="meta">@Synthetic</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    requestManager.clear(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相比于 RequestFutureTarget，PreloadTarget 里的逻辑就简单多了，可以看到加载资源结束后只是把此次请求释放掉了，不用像其他 Target 一样做额外的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载的标准写法如下，也是官方示例写法：&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码分析 - 感知生命周期 </title>
    <link href="http://yoursite.com/c135648c/"/>
    <id>http://yoursite.com/c135648c/</id>
    <published>2019-02-17T08:20:28.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>发起一个图片加载请求后，我们期望当该请求所处的界面 onStop 时请求也随之停止，再次 onStart 时请求能够随之继续， onDestroy 时请求能够随之销毁。这就需要能够感知当前 Activity 的生命周期变化，由于 Fragment 在 onAttach 之后与 Activity 有相同的生命周期，glide 利用这一点，通过给 Activity 添加一个无界面的 Fragment 实现感知。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/4679478-ac8b2896aba7322b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>发起请求时通过 with 方法传入上下文，此方法会返回一个 RequestManager，RequestManager 用于管理和启动图片加载请求，可以感知外部 Activity 的生命周期，从而管理请求随之启动、停止和重启。</p><p>先来分析一个较为简单的流程：with 方法传入 Activity，会调用到 RequestManagerRetriever 的 get 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(@NonNull Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      assertNotDestroyed(activity);</span><br><span class="line">      android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class="line">      <span class="keyword">return</span> fragmentGet(</span><br><span class="line">          activity, fm, <span class="comment">/*parentHint=*/</span> <span class="keyword">null</span>, isActivityVisible(activity));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其中调用 fragmentGet 方法去新建 RequestManager ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> RequestManager <span class="title">fragmentGet</span><span class="params">(@NonNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull android.app.FragmentManager fm,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable android.app.Fragment parentHint,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里新建了一个无界面的 Fragment，并添加到该界面</span></span><br><span class="line">    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint, isParentVisible);</span><br><span class="line">    RequestManager requestManager = current.getRequestManager();</span><br><span class="line">    <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      Glide glide = Glide.get(context);</span><br><span class="line">      requestManager =</span><br><span class="line">    <span class="comment">//这里新建了一个 requestManager，并将无界面 Fragment 的生命周期暴露给 requestManager</span></span><br><span class="line">          factory.build(</span><br><span class="line">              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">      current.setRequestManager(requestManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestManager;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>当无界面 Fragment 生命周期变化时，通过接口回调出去给 requestManager，这样 requestManager 就实现了随外部生命周期变化自动启动、停止和重启请求。with 方法若传入其他参数，流程上也是大同小异，都是找到当前 Activity 或 Fragment ，给其添加一个无界面 Fragment 罢了。</p><p>而不管传入何参数，都有这样一个逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">     <span class="keyword">return</span> get(view.getContext().getApplicationContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若当前处于非主线程，则一律基于应用生命周期请求，不再关心所在 Fragment 或 Activity 的生命周期，这是因为子线程中执行的任务本身就是跟所在界面生命周期无关的。</p><p>在分析这一块时涉及 ContextWrapper 相关的逻辑，若不太熟悉，可参考：<a href="https://blog.csdn.net/guolin_blog/article/details/47028975" target="_blank" rel="noopener">ContextWrapper</a> 。</p><p>Glide 推出时谷歌还未发布 Architecture Components，而现在若要实现一个可感知生命周期的逻辑，大可不必像 Glide 一样添加一个 Fragment ，直接使用 Architecture Components 中的 Lifecycle 组件就可以很方便的实现了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发起一个图片加载请求后，我们期望当该请求所处的界面 onStop 时请求也随之停止，再次 onStart 时请求能够随之继续， onDestroy 时请求能够随之销毁。这就需要能够感知当前 Activity 的生命周期变化，由于 Fragment 在 onAttach 之后与 Activity 有相同的生命周期，glide 利用这一点，通过给 Activity 添加一个无界面的 Fragment 实现感知。&lt;/p&gt;
    
    </summary>
    
      <category term="Glide 源码分析" scheme="http://yoursite.com/categories/Glide-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>Android 端音频变声方案</title>
    <link href="http://yoursite.com/785f874e/"/>
    <id>http://yoursite.com/785f874e/</id>
    <published>2018-11-01T15:23:58.000Z</published>
    <updated>2019-06-28T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>音频变声实质上是通过调整 PCM 数据的音调、节拍等属性，实现听感上的变化。如果是 mp3、aac 等压缩音频，则需提前解码成 PCM 数据，Android 端可以通过 MediaExtractor 及 MediaCodec 解码得到 PCM，但调整音调、节拍仅靠 Android api 就无能为力了，只能集成第三方库来实现，常见的音频处理库有 <a href="https://www.fmod.com" target="_blank" rel="noopener">Fmod</a> 、  <a href="http://www.surina.net/soundtouch/" target="_blank" rel="noopener">SoundTouch</a> 。</p><a id="more"></a><h3 id="Fmod"><a href="#Fmod" class="headerlink" title="Fmod"></a>Fmod</h3><p>Fmod 是一个跨平台的音频处理引擎，官网提供了各个平台的 <a href="https://www.fmod.com/resources/documentation-api" target="_blank" rel="noopener">接入文档</a>，可以实现变调、变速变声效果以及混响、颤音等高级效果。开发调用简单，sdk 对外提供了播放器接口，传入音频文件即可直接变声播放。但不支持保存处理后的音频到文件，商业用途需要购买许可证。</p><p>如果你不需要保存处理后的音频到文件，那就使用 Fmod 吧，你会发现音频变声是如此简单，而且还支持混响、颤音等高级变声效果！</p><p>如果需要保存处理后的音频到文件，那么……我就请你再认真的思考一下，你的需求真的必须要保存处理后的音频吗？假设一个聊天 app 要实现语音消息变声，那这段语音只会在你的应用中播放，那就都可以通过 Fmod 播放器变声播放啊，要知道 Fmod 可是一个跨平台的音频引擎，不论是 Android、IOS 还是 Web 端，只要知道变声参数就可以变声播放了，不需要保存处理后的音频到文件。</p><p>能否跃过不支持保存处理后的音频到文件这一缺点，关键是要确定用户能否直接接触到处理后的音频文件，若能接触到，就无法使用 Fmod 了。</p><p>关于集成使用 Fmod 库十分简单，网上也有很多，就不再展开了。</p><h3 id="SoundTouch"><a href="#SoundTouch" class="headerlink" title="SoundTouch"></a>SoundTouch</h3><p>SoundTouch 是一个开源免费的音频处理库，可以改变音调、节拍和播放速率。开发调用时需自行将音频文件解码成 PCM 数据，传入 SoundTouch 处理后，SoundTouch 会输出处理后的 PCM 数据。基于这种使用方式，我们可以对其自由定制以适用于自己的应用。</p><p>比如你要实现一个 mp3 的变声播放，可以先用 MediaCodec 将 mp3 解码成 PCM，通过 SoundTouch 处理得到变声后的 PCM，再结合 AudioTrack 实现播放；如果你要将一个 mp3 变声后保存下来，那就在得到变声后的 PCM 后，结合 MediaCodec 将其编码保存下来。</p><p>相比 Fmod，SoundTouch 的集成会复杂点，不是随便参考一篇教程就可以跑通的了，这里提供一份亲测可行的 <a href="https://github.com/yhaolpz/AndroidSoundTouch" target="_blank" rel="noopener">SoundTouch 源码</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;音频变声实质上是通过调整 PCM 数据的音调、节拍等属性，实现听感上的变化。如果是 mp3、aac 等压缩音频，则需提前解码成 PCM 数据，Android 端可以通过 MediaExtractor 及 MediaCodec 解码得到 PCM，但调整音调、节拍仅靠 Android api 就无能为力了，只能集成第三方库来实现，常见的音频处理库有 &lt;a href=&quot;https://www.fmod.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fmod&lt;/a&gt; 、  &lt;a href=&quot;http://www.surina.net/soundtouch/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SoundTouch&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="音视频" scheme="http://yoursite.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
</feed>
